
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000023d0  00002464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016c  0080014c  0080014c  000024b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000423b  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001994  00000000  00000000  00006c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002706  00000000  00000000  000085b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb4  00000000  00000000  0000acbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000120a  00000000  00000000  0000b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025b2  00000000  00000000  0000ca7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000f02c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_5>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_13>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_20>
      54:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_21>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2529>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2496>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      b4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 48     ake Project by H
      c4:	61 6e 73 20 53 6f 6e 67 00                          ans Song.

000000cd <__c.2494>:
      cd:	53 6e 61 6b 65 00                                   Snake.

000000d3 <numbers>:
      d3:	3e 01 3b 01 37 01 33 01 2f 01 2b 01 27 01 23 01     >.;.7.3./.+.'.#.
      e3:	1f 01 1b 01                                         ....

000000e7 <letters>:
      e7:	ad 01 a9 01 a5 01 a1 01 9d 01 99 01 95 01 91 01     ................
      f7:	8e 01 8a 01 86 01 82 01 7d 01 79 01 75 01 71 01     ........}.y.u.q.
     107:	6c 01 68 01 64 01 5f 01 5b 01 56 01 51 01 4c 01     l.h.d._.[.V.Q.L.
     117:	47 01 42 01                                         G.B.

0000011b <cols_9>:
     11b:	64 92 92 7d                                         d..}

0000011f <cols_8>:
     11f:	6c 92 92 6d                                         l..m

00000123 <cols_7>:
     123:	80 9e a0 c1                                         ....

00000127 <cols_6>:
     127:	7c 92 92 4d                                         |..M

0000012b <cols_5>:
     12b:	e4 a2 a2 9d                                         ....

0000012f <cols_4>:
     12f:	18 28 48 ff                                         .(H.

00000133 <cols_3>:
     133:	44 92 92 6d                                         D..m

00000137 <cols_2>:
     137:	46 8a 92 63                                         F..c

0000013b <cols_1>:
     13b:	42 fe 03                                            B..

0000013e <cols_0>:
     13e:	7c 92 a2 7d                                         |..}

00000142 <cols_Z>:
     142:	86 8a 92 a2 c3                                      .....

00000147 <cols_Y>:
     147:	e0 10 0e 10 e1                                      .....

0000014c <cols_X>:
     14c:	c6 28 10 28 c7                                      .(.(.

00000151 <cols_W>:
     151:	fc 02 1c 02 fd                                      .....

00000156 <cols_V>:
     156:	f8 04 02 04 f9                                      .....

0000015b <cols_U>:
     15b:	fc 02 02 fd                                         ....

0000015f <cols_T>:
     15f:	80 80 fe 80 81                                      .....

00000164 <cols_S>:
     164:	64 92 92 4d                                         d..M

00000168 <cols_R>:
     168:	fe 90 98 67                                         ...g

0000016c <cols_Q>:
     16c:	7c 82 8a 7c 03                                      |..|.

00000171 <cols_P>:
     171:	fe 90 90 61                                         ...a

00000175 <cols_O>:
     175:	7c 82 82 7d                                         |..}

00000179 <cols_N>:
     179:	fe 20 10 ff                                         . ..

0000017d <cols_M>:
     17d:	fe 40 30 40 ff                                      .@0@.

00000182 <cols_L>:
     182:	fe 02 02 03                                         ....

00000186 <cols_K>:
     186:	fe 10 28 c7                                         ..(.

0000018a <cols_J>:
     18a:	04 02 02 fd                                         ....

0000018e <cols_I>:
     18e:	82 fe 83                                            ...

00000191 <cols_H>:
     191:	fe 10 10 ff                                         ....

00000195 <cols_G>:
     195:	7c 82 92 5d                                         |..]

00000199 <cols_F>:
     199:	fe 90 90 81                                         ....

0000019d <cols_E>:
     19d:	fe 92 92 83                                         ....

000001a1 <cols_D>:
     1a1:	fe 82 82 7d                                         ...}

000001a5 <cols_C>:
     1a5:	7c 82 82 45                                         |..E

000001a9 <cols_B>:
     1a9:	fe 92 92 6d                                         ...m

000001ad <cols_A>:
     1ad:	7e 90 90 7f                                         ~...

000001b1 <__c.2054>:
     1b1:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001b8 <__c.2050>:
     1b8:	1b 5b 25 64 6d 00                                   .[%dm.

000001be <__c.2040>:
     1be:	1b 5b 32 4a 00                                      .[2J.

000001c3 <__c.2025>:
     1c3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d8 e0       	ldi	r29, 0x08	; 8
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	e0 ed       	ldi	r30, 0xD0	; 208
     1e0:	f3 e2       	ldi	r31, 0x23	; 35
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	ac 34       	cpi	r26, 0x4C	; 76
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	22 e0       	ldi	r18, 0x02	; 2
     1f0:	ac e4       	ldi	r26, 0x4C	; 76
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a8 3b       	cpi	r26, 0xB8	; 184
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <main>
     202:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     20a:	e8 e6       	ldi	r30, 0x68	; 104
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	82 60       	ori	r24, 0x02	; 2
     212:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     214:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     216:	ec e6       	ldi	r30, 0x6C	; 108
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 60       	ori	r24, 0x0F	; 15
     21e:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     220:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
     224:	08 95       	ret

00000226 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     226:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
     22a:	08 95       	ret

0000022c <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     22c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     230:	18 16       	cp	r1, r24
     232:	3c f5       	brge	.+78     	; 0x282 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     234:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     238:	6f b7       	in	r22, 0x3f	; 63
		cli();
     23a:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     23c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <__data_end>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	b4 f0       	brlt	.+44     	; 0x270 <button_pushed+0x44>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     24a:	f9 01       	movw	r30, r18
     24c:	e3 5b       	subi	r30, 0xB3	; 179
     24e:	fe 4f       	sbci	r31, 0xFE	; 254
     250:	40 81       	ld	r20, Z
     252:	f9 01       	movw	r30, r18
     254:	e4 5b       	subi	r30, 0xB4	; 180
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     25a:	9f 5f       	subi	r25, 0xFF	; 255
     25c:	29 2f       	mov	r18, r25
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <__data_end>
     264:	04 2e       	mov	r0, r20
     266:	00 0c       	add	r0, r0
     268:	55 0b       	sbc	r21, r21
     26a:	24 17       	cp	r18, r20
     26c:	35 07       	cpc	r19, r21
     26e:	6c f3       	brlt	.-38     	; 0x24a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     270:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <__data_end>
     274:	91 50       	subi	r25, 0x01	; 1
     276:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__data_end>
		
		if(interrupts_were_enabled) {
     27a:	66 23       	and	r22, r22
     27c:	1c f4       	brge	.+6      	; 0x284 <button_pushed+0x58>
			// Turn them back on again
			sei();
     27e:	78 94       	sei
     280:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     282:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     284:	08 95       	ret

00000286 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	2f 93       	push	r18
     292:	3f 93       	push	r19
     294:	4f 93       	push	r20
     296:	5f 93       	push	r21
     298:	6f 93       	push	r22
     29a:	7f 93       	push	r23
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2a4:	43 b1       	in	r20, 0x03	; 3
     2a6:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2a8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     2ac:	88 30       	cpi	r24, 0x08	; 8
     2ae:	64 f5       	brge	.+88     	; 0x308 <__vector_5+0x82>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2b4:	64 2f       	mov	r22, r20
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	9b 01       	movw	r18, r22
     2ba:	08 2e       	mov	r0, r24
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__vector_5+0x3c>
     2be:	35 95       	asr	r19
     2c0:	27 95       	ror	r18
     2c2:	0a 94       	dec	r0
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <__vector_5+0x38>
     2c6:	20 ff       	sbrs	r18, 0
     2c8:	1b c0       	rjmp	.+54     	; 0x300 <__vector_5+0x7a>
     2ca:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <last_button_state>
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	08 2e       	mov	r0, r24
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <__vector_5+0x52>
     2d4:	35 95       	asr	r19
     2d6:	27 95       	ror	r18
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <__vector_5+0x4e>
     2dc:	20 fd       	sbrc	r18, 0
     2de:	10 c0       	rjmp	.+32     	; 0x300 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2e0:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <__data_end>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	2e 0f       	add	r18, r30
     2e8:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__data_end>
     2ec:	0e 2e       	mov	r0, r30
     2ee:	00 0c       	add	r0, r0
     2f0:	ff 0b       	sbc	r31, r31
     2f2:	e3 5b       	subi	r30, 0xB3	; 179
     2f4:	fe 4f       	sbci	r31, 0xFE	; 254
     2f6:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     2f8:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     2fc:	28 30       	cpi	r18, 0x08	; 8
     2fe:	24 f4       	brge	.+8      	; 0x308 <__vector_5+0x82>
     300:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     302:	84 30       	cpi	r24, 0x04	; 4
     304:	91 05       	cpc	r25, r1
     306:	c1 f6       	brne	.-80     	; 0x2b8 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     308:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <last_button_state>
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	9f 91       	pop	r25
     312:	8f 91       	pop	r24
     314:	7f 91       	pop	r23
     316:	6f 91       	pop	r22
     318:	5f 91       	pop	r21
     31a:	4f 91       	pop	r20
     31c:	3f 91       	pop	r19
     31e:	2f 91       	pop	r18
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <add_rat>:
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	cf 93       	push	r28
     334:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
     338:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <srandom>
     33c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
     344:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     348:	ab 01       	movw	r20, r22
     34a:	bc 01       	movw	r22, r24
     34c:	47 70       	andi	r20, 0x07	; 7
     34e:	55 27       	eor	r21, r21
     350:	66 27       	eor	r22, r22
     352:	70 78       	andi	r23, 0x80	; 128
     354:	77 23       	and	r23, r23
     356:	64 f4       	brge	.+24     	; 0x370 <add_rat+0x46>
     358:	41 50       	subi	r20, 0x01	; 1
     35a:	51 09       	sbc	r21, r1
     35c:	61 09       	sbc	r22, r1
     35e:	71 09       	sbc	r23, r1
     360:	48 6f       	ori	r20, 0xF8	; 248
     362:	5f 6f       	ori	r21, 0xFF	; 255
     364:	6f 6f       	ori	r22, 0xFF	; 255
     366:	7f 6f       	ori	r23, 0xFF	; 255
     368:	4f 5f       	subi	r20, 0xFF	; 255
     36a:	5f 4f       	sbci	r21, 0xFF	; 255
     36c:	6f 4f       	sbci	r22, 0xFF	; 255
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	d7 01       	movw	r26, r14
     372:	c6 01       	movw	r24, r12
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	99 27       	eor	r25, r25
     378:	aa 27       	eor	r26, r26
     37a:	b0 78       	andi	r27, 0x80	; 128
     37c:	bb 23       	and	r27, r27
     37e:	54 f4       	brge	.+20     	; 0x394 <add_rat+0x6a>
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	a1 09       	sbc	r26, r1
     384:	b1 09       	sbc	r27, r1
     386:	80 6f       	ori	r24, 0xF0	; 240
     388:	9f 6f       	ori	r25, 0xFF	; 255
     38a:	af 6f       	ori	r26, 0xFF	; 255
     38c:	bf 6f       	ori	r27, 0xFF	; 255
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	a1 1d       	adc	r26, r1
     392:	b1 1d       	adc	r27, r1
     394:	64 2f       	mov	r22, r20
     396:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     39a:	f8 2e       	mov	r15, r24
     39c:	c3 e6       	ldi	r28, 0x63	; 99
     39e:	32 c0       	rjmp	.+100    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3a0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     3a4:	6b 01       	movw	r12, r22
     3a6:	7c 01       	movw	r14, r24
     3a8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     3ac:	ab 01       	movw	r20, r22
     3ae:	bc 01       	movw	r22, r24
     3b0:	47 70       	andi	r20, 0x07	; 7
     3b2:	55 27       	eor	r21, r21
     3b4:	66 27       	eor	r22, r22
     3b6:	70 78       	andi	r23, 0x80	; 128
     3b8:	77 23       	and	r23, r23
     3ba:	64 f4       	brge	.+24     	; 0x3d4 <add_rat+0xaa>
     3bc:	41 50       	subi	r20, 0x01	; 1
     3be:	51 09       	sbc	r21, r1
     3c0:	61 09       	sbc	r22, r1
     3c2:	71 09       	sbc	r23, r1
     3c4:	48 6f       	ori	r20, 0xF8	; 248
     3c6:	5f 6f       	ori	r21, 0xFF	; 255
     3c8:	6f 6f       	ori	r22, 0xFF	; 255
     3ca:	7f 6f       	ori	r23, 0xFF	; 255
     3cc:	4f 5f       	subi	r20, 0xFF	; 255
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
     3d0:	6f 4f       	sbci	r22, 0xFF	; 255
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	d7 01       	movw	r26, r14
     3d6:	c6 01       	movw	r24, r12
     3d8:	8f 70       	andi	r24, 0x0F	; 15
     3da:	99 27       	eor	r25, r25
     3dc:	aa 27       	eor	r26, r26
     3de:	b0 78       	andi	r27, 0x80	; 128
     3e0:	bb 23       	and	r27, r27
     3e2:	54 f4       	brge	.+20     	; 0x3f8 <add_rat+0xce>
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	a1 09       	sbc	r26, r1
     3e8:	b1 09       	sbc	r27, r1
     3ea:	80 6f       	ori	r24, 0xF0	; 240
     3ec:	9f 6f       	ori	r25, 0xFF	; 255
     3ee:	af 6f       	ori	r26, 0xFF	; 255
     3f0:	bf 6f       	ori	r27, 0xFF	; 255
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	a1 1d       	adc	r26, r1
     3f6:	b1 1d       	adc	r27, r1
     3f8:	64 2f       	mov	r22, r20
     3fa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     3fe:	f8 2e       	mov	r15, r24
     400:	c1 50       	subi	r28, 0x01	; 1
     402:	81 f0       	breq	.+32     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     404:	8f 2d       	mov	r24, r15
     406:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <is_snake_at>
     40a:	81 11       	cpse	r24, r1
     40c:	c9 cf       	rjmp	.-110    	; 0x3a0 <add_rat+0x76>
     40e:	8f 2d       	mov	r24, r15
     410:	0e 94 78 03 	call	0x6f0	; 0x6f0 <is_food_at>
     414:	81 11       	cpse	r24, r1
     416:	c4 cf       	rjmp	.-120    	; 0x3a0 <add_rat+0x76>
     418:	8f 2d       	mov	r24, r15
     41a:	0e 94 4b 03 	call	0x696	; 0x696 <is_super_food_at>
     41e:	81 11       	cpse	r24, r1
     420:	bf cf       	rjmp	.-130    	; 0x3a0 <add_rat+0x76>
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	88 e0       	ldi	r24, 0x08	; 8
     426:	03 c0       	rjmp	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     428:	f0 92 92 01 	sts	0x0192, r15	; 0x800192 <rat_pos>
     42c:	8f 2d       	mov	r24, r15
     42e:	cf 91       	pop	r28
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <get_rat_pos>:
     43a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <rat_pos>
     43e:	08 95       	ret

00000440 <position_out_of_bounds>:
     440:	cf 93       	push	r28
     442:	c8 2f       	mov	r28, r24
     444:	0e 94 cd 05 	call	0xb9a	; 0xb9a <x_position>
     448:	8f 30       	cpi	r24, 0x0F	; 15
     44a:	90 f0       	brcs	.+36     	; 0x470 <position_out_of_bounds+0x30>
     44c:	8c 2f       	mov	r24, r28
     44e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <x_position>
     452:	83 30       	cpi	r24, 0x03	; 3
     454:	78 f4       	brcc	.+30     	; 0x474 <position_out_of_bounds+0x34>
     456:	8c 2f       	mov	r24, r28
     458:	0e 94 d0 05 	call	0xba0	; 0xba0 <y_position>
     45c:	87 30       	cpi	r24, 0x07	; 7
     45e:	60 f0       	brcs	.+24     	; 0x478 <position_out_of_bounds+0x38>
     460:	8c 2f       	mov	r24, r28
     462:	0e 94 d0 05 	call	0xba0	; 0xba0 <y_position>
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	83 30       	cpi	r24, 0x03	; 3
     46a:	38 f0       	brcs	.+14     	; 0x47a <position_out_of_bounds+0x3a>
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	05 c0       	rjmp	.+10     	; 0x47a <position_out_of_bounds+0x3a>
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	03 c0       	rjmp	.+6      	; 0x47a <position_out_of_bounds+0x3a>
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	01 c0       	rjmp	.+2      	; 0x47a <position_out_of_bounds+0x3a>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	89 2f       	mov	r24, r25
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <next_rat_pos>:
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	d4 e6       	ldi	r29, 0x64	; 100
     48c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <rat_pos>
     490:	0e 94 cd 05 	call	0xb9a	; 0xb9a <x_position>
     494:	18 2f       	mov	r17, r24
     496:	c8 2f       	mov	r28, r24
     498:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <rat_pos>
     49c:	0e 94 d0 05 	call	0xba0	; 0xba0 <y_position>
     4a0:	f8 2e       	mov	r15, r24
     4a2:	08 2f       	mov	r16, r24
     4a4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	83 70       	andi	r24, 0x03	; 3
     4ae:	99 27       	eor	r25, r25
     4b0:	aa 27       	eor	r26, r26
     4b2:	b0 78       	andi	r27, 0x80	; 128
     4b4:	bb 23       	and	r27, r27
     4b6:	54 f4       	brge	.+20     	; 0x4cc <next_rat_pos+0x4c>
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	a1 09       	sbc	r26, r1
     4bc:	b1 09       	sbc	r27, r1
     4be:	8c 6f       	ori	r24, 0xFC	; 252
     4c0:	9f 6f       	ori	r25, 0xFF	; 255
     4c2:	af 6f       	ori	r26, 0xFF	; 255
     4c4:	bf 6f       	ori	r27, 0xFF	; 255
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	a1 1d       	adc	r26, r1
     4ca:	b1 1d       	adc	r27, r1
     4cc:	81 11       	cpse	r24, r1
     4ce:	07 c0       	rjmp	.+14     	; 0x4de <next_rat_pos+0x5e>
     4d0:	c1 30       	cpi	r28, 0x01	; 1
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <next_rat_pos+0x58>
     4d4:	c1 0f       	add	r28, r17
     4d6:	1f c0       	rjmp	.+62     	; 0x516 <next_rat_pos+0x96>
     4d8:	cf ef       	ldi	r28, 0xFF	; 255
     4da:	c1 0f       	add	r28, r17
     4dc:	1c c0       	rjmp	.+56     	; 0x516 <next_rat_pos+0x96>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	41 f4       	brne	.+16     	; 0x4f2 <next_rat_pos+0x72>
     4e2:	cf 30       	cpi	r28, 0x0F	; 15
     4e4:	19 f4       	brne	.+6      	; 0x4ec <next_rat_pos+0x6c>
     4e6:	cf ef       	ldi	r28, 0xFF	; 255
     4e8:	c1 0f       	add	r28, r17
     4ea:	15 c0       	rjmp	.+42     	; 0x516 <next_rat_pos+0x96>
     4ec:	c1 e0       	ldi	r28, 0x01	; 1
     4ee:	c1 0f       	add	r28, r17
     4f0:	12 c0       	rjmp	.+36     	; 0x516 <next_rat_pos+0x96>
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	41 f4       	brne	.+16     	; 0x506 <next_rat_pos+0x86>
     4f6:	07 30       	cpi	r16, 0x07	; 7
     4f8:	19 f4       	brne	.+6      	; 0x500 <next_rat_pos+0x80>
     4fa:	0f ef       	ldi	r16, 0xFF	; 255
     4fc:	0f 0d       	add	r16, r15
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <next_rat_pos+0x96>
     500:	01 e0       	ldi	r16, 0x01	; 1
     502:	0f 0d       	add	r16, r15
     504:	08 c0       	rjmp	.+16     	; 0x516 <next_rat_pos+0x96>
     506:	83 30       	cpi	r24, 0x03	; 3
     508:	31 f4       	brne	.+12     	; 0x516 <next_rat_pos+0x96>
     50a:	01 30       	cpi	r16, 0x01	; 1
     50c:	11 f4       	brne	.+4      	; 0x512 <next_rat_pos+0x92>
     50e:	0f 0d       	add	r16, r15
     510:	02 c0       	rjmp	.+4      	; 0x516 <next_rat_pos+0x96>
     512:	0f ef       	ldi	r16, 0xFF	; 255
     514:	0f 0d       	add	r16, r15
     516:	60 2f       	mov	r22, r16
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     51e:	c8 2f       	mov	r28, r24
     520:	d1 50       	subi	r29, 0x01	; 1
     522:	a1 f0       	breq	.+40     	; 0x54c <next_rat_pos+0xcc>
     524:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <is_snake_at>
     528:	81 11       	cpse	r24, r1
     52a:	b0 cf       	rjmp	.-160    	; 0x48c <next_rat_pos+0xc>
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <is_food_at>
     532:	81 11       	cpse	r24, r1
     534:	ab cf       	rjmp	.-170    	; 0x48c <next_rat_pos+0xc>
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 4b 03 	call	0x696	; 0x696 <is_super_food_at>
     53c:	81 11       	cpse	r24, r1
     53e:	a6 cf       	rjmp	.-180    	; 0x48c <next_rat_pos+0xc>
     540:	8c 2f       	mov	r24, r28
     542:	0e 94 20 02 	call	0x440	; 0x440 <position_out_of_bounds>
     546:	81 11       	cpse	r24, r1
     548:	a1 cf       	rjmp	.-190    	; 0x48c <next_rat_pos+0xc>
     54a:	02 c0       	rjmp	.+4      	; 0x550 <next_rat_pos+0xd0>
     54c:	88 e0       	ldi	r24, 0x08	; 8
     54e:	03 c0       	rjmp	.+6      	; 0x556 <next_rat_pos+0xd6>
     550:	c0 93 92 01 	sts	0x0192, r28	; 0x800192 <rat_pos>
     554:	8c 2f       	mov	r24, r28
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	08 95       	ret

00000562 <is_rat_at>:
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <rat_pos>
     568:	28 13       	cpse	r18, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	89 2f       	mov	r24, r25
     56e:	08 95       	ret

00000570 <add_super_food>:

uint8_t super_food_exists;

PosnType super_food_pos;

PosnType add_super_food(void) {
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	cf 93       	push	r28
	int8_t x, y, attempts;
	PosnType test_position;
	x = 0;
	y = 0;
	attempts = 0;
	srandom(get_clock_ticks());
     57a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
     57e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <srandom>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
		x = random()%BOARD_WIDTH;
     582:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     586:	6b 01       	movw	r12, r22
     588:	7c 01       	movw	r14, r24
		y = random()%BOARD_HEIGHT;
     58a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
		test_position = position(x,y);
     58e:	ab 01       	movw	r20, r22
     590:	bc 01       	movw	r22, r24
     592:	47 70       	andi	r20, 0x07	; 7
     594:	55 27       	eor	r21, r21
     596:	66 27       	eor	r22, r22
     598:	70 78       	andi	r23, 0x80	; 128
     59a:	77 23       	and	r23, r23
     59c:	64 f4       	brge	.+24     	; 0x5b6 <add_super_food+0x46>
     59e:	41 50       	subi	r20, 0x01	; 1
     5a0:	51 09       	sbc	r21, r1
     5a2:	61 09       	sbc	r22, r1
     5a4:	71 09       	sbc	r23, r1
     5a6:	48 6f       	ori	r20, 0xF8	; 248
     5a8:	5f 6f       	ori	r21, 0xFF	; 255
     5aa:	6f 6f       	ori	r22, 0xFF	; 255
     5ac:	7f 6f       	ori	r23, 0xFF	; 255
     5ae:	4f 5f       	subi	r20, 0xFF	; 255
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	6f 4f       	sbci	r22, 0xFF	; 255
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	d7 01       	movw	r26, r14
     5b8:	c6 01       	movw	r24, r12
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	99 27       	eor	r25, r25
     5be:	aa 27       	eor	r26, r26
     5c0:	b0 78       	andi	r27, 0x80	; 128
     5c2:	bb 23       	and	r27, r27
     5c4:	54 f4       	brge	.+20     	; 0x5da <add_super_food+0x6a>
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	a1 09       	sbc	r26, r1
     5ca:	b1 09       	sbc	r27, r1
     5cc:	80 6f       	ori	r24, 0xF0	; 240
     5ce:	9f 6f       	ori	r25, 0xFF	; 255
     5d0:	af 6f       	ori	r26, 0xFF	; 255
     5d2:	bf 6f       	ori	r27, 0xFF	; 255
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	a1 1d       	adc	r26, r1
     5d8:	b1 1d       	adc	r27, r1
     5da:	64 2f       	mov	r22, r20
     5dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     5e0:	f8 2e       	mov	r15, r24
     5e2:	c3 e6       	ldi	r28, 0x63	; 99
     5e4:	32 c0       	rjmp	.+100    	; 0x64a <add_super_food+0xda>
	attempts = 0;
	srandom(get_clock_ticks());
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
		x = random()%BOARD_WIDTH;
     5e6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     5ea:	6b 01       	movw	r12, r22
     5ec:	7c 01       	movw	r14, r24
		y = random()%BOARD_HEIGHT;
     5ee:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
		test_position = position(x,y);
     5f2:	ab 01       	movw	r20, r22
     5f4:	bc 01       	movw	r22, r24
     5f6:	47 70       	andi	r20, 0x07	; 7
     5f8:	55 27       	eor	r21, r21
     5fa:	66 27       	eor	r22, r22
     5fc:	70 78       	andi	r23, 0x80	; 128
     5fe:	77 23       	and	r23, r23
     600:	64 f4       	brge	.+24     	; 0x61a <add_super_food+0xaa>
     602:	41 50       	subi	r20, 0x01	; 1
     604:	51 09       	sbc	r21, r1
     606:	61 09       	sbc	r22, r1
     608:	71 09       	sbc	r23, r1
     60a:	48 6f       	ori	r20, 0xF8	; 248
     60c:	5f 6f       	ori	r21, 0xFF	; 255
     60e:	6f 6f       	ori	r22, 0xFF	; 255
     610:	7f 6f       	ori	r23, 0xFF	; 255
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	6f 4f       	sbci	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	d7 01       	movw	r26, r14
     61c:	c6 01       	movw	r24, r12
     61e:	8f 70       	andi	r24, 0x0F	; 15
     620:	99 27       	eor	r25, r25
     622:	aa 27       	eor	r26, r26
     624:	b0 78       	andi	r27, 0x80	; 128
     626:	bb 23       	and	r27, r27
     628:	54 f4       	brge	.+20     	; 0x63e <add_super_food+0xce>
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	a1 09       	sbc	r26, r1
     62e:	b1 09       	sbc	r27, r1
     630:	80 6f       	ori	r24, 0xF0	; 240
     632:	9f 6f       	ori	r25, 0xFF	; 255
     634:	af 6f       	ori	r26, 0xFF	; 255
     636:	bf 6f       	ori	r27, 0xFF	; 255
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	a1 1d       	adc	r26, r1
     63c:	b1 1d       	adc	r27, r1
     63e:	64 2f       	mov	r22, r20
     640:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     644:	f8 2e       	mov	r15, r24
     646:	c1 50       	subi	r28, 0x01	; 1
		attempts++;
	} while(attempts < 100 && 
				(is_snake_at(test_position) || is_food_at(test_position) ||
				is_rat_at(test_position)));
     648:	81 f0       	breq	.+32     	; 0x66a <add_super_food+0xfa>
		x = random()%BOARD_WIDTH;
		y = random()%BOARD_HEIGHT;
		test_position = position(x,y);
		attempts++;
	} while(attempts < 100 && 
				(is_snake_at(test_position) || is_food_at(test_position) ||
     64a:	8f 2d       	mov	r24, r15
     64c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <is_snake_at>
		// then being random
		x = random()%BOARD_WIDTH;
		y = random()%BOARD_HEIGHT;
		test_position = position(x,y);
		attempts++;
	} while(attempts < 100 && 
     650:	81 11       	cpse	r24, r1
     652:	c9 cf       	rjmp	.-110    	; 0x5e6 <add_super_food+0x76>
				(is_snake_at(test_position) || is_food_at(test_position) ||
     654:	8f 2d       	mov	r24, r15
     656:	0e 94 78 03 	call	0x6f0	; 0x6f0 <is_food_at>
     65a:	81 11       	cpse	r24, r1
     65c:	c4 cf       	rjmp	.-120    	; 0x5e6 <add_super_food+0x76>
				is_rat_at(test_position)));
     65e:	8f 2d       	mov	r24, r15
     660:	0e 94 b1 02 	call	0x562	; 0x562 <is_rat_at>
		x = random()%BOARD_WIDTH;
		y = random()%BOARD_HEIGHT;
		test_position = position(x,y);
		attempts++;
	} while(attempts < 100 && 
				(is_snake_at(test_position) || is_food_at(test_position) ||
     664:	81 11       	cpse	r24, r1
     666:	bf cf       	rjmp	.-130    	; 0x5e6 <add_super_food+0x76>
     668:	02 c0       	rjmp	.+4      	; 0x66e <add_super_food+0xfe>
        
	if(attempts >= 100) {
		/* We tried 100 times to generate a position
		** but they were all occupied.
		*/
		return INVALID_POSITION;
     66a:	88 e0       	ldi	r24, 0x08	; 8
     66c:	06 c0       	rjmp	.+12     	; 0x67a <add_super_food+0x10a>
	}
	super_food_exists = 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <super_food_exists>
	super_food_pos = test_position;
     674:	f0 92 93 01 	sts	0x0193, r15	; 0x800193 <super_food_pos>
	return test_position;	
     678:	8f 2d       	mov	r24, r15
}
     67a:	cf 91       	pop	r28
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	08 95       	ret

00000686 <get_super_food_pos>:

PosnType get_super_food_pos(void) {
	return super_food_pos;
}
     686:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <super_food_pos>
     68a:	08 95       	ret

0000068c <remove_super_food>:

void remove_super_food(void) {
	super_food_exists = 0;
     68c:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <super_food_exists>
	reset_superfood_status();
     690:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <reset_superfood_status>
     694:	08 95       	ret

00000696 <is_super_food_at>:
}

uint8_t is_super_food_at(PosnType pos) {
	if(pos == super_food_pos && super_food_exists) {
     696:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <super_food_pos>
     69a:	98 13       	cpse	r25, r24
     69c:	07 c0       	rjmp	.+14     	; 0x6ac <is_super_food_at+0x16>
		return 1;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <super_food_exists>
     6a4:	91 11       	cpse	r25, r1
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <is_super_food_at+0x18>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret
	} else {
		return 0;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     6ae:	08 95       	ret

000006b0 <get_super_food_existence>:

uint8_t get_super_food_existence(void) {
	return super_food_exists;
}
     6b0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <super_food_exists>
     6b4:	08 95       	ret

000006b6 <init_food>:
/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
}
     6b6:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <numFoodItems>
     6ba:	08 95       	ret

000006bc <food_at>:
     6bc:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <numFoodItems>
     6c0:	13 16       	cp	r1, r19
     6c2:	84 f4       	brge	.+32     	; 0x6e4 <food_at+0x28>
     6c4:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <foodPositions>
     6c8:	89 17       	cp	r24, r25
     6ca:	71 f0       	breq	.+28     	; 0x6e8 <food_at+0x2c>
     6cc:	e7 e9       	ldi	r30, 0x97	; 151
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <food_at+0x1e>
     6d4:	21 91       	ld	r18, Z+
     6d6:	28 17       	cp	r18, r24
     6d8:	49 f0       	breq	.+18     	; 0x6ec <food_at+0x30>
     6da:	9f 5f       	subi	r25, 0xFF	; 255
     6dc:	39 13       	cpse	r19, r25
     6de:	fa cf       	rjmp	.-12     	; 0x6d4 <food_at+0x18>
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	08 95       	ret
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	08 95       	ret
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	08 95       	ret
     6ec:	89 2f       	mov	r24, r25
     6ee:	08 95       	ret

000006f0 <is_food_at>:
     6f0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <food_at>
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	8f 3f       	cpi	r24, 0xFF	; 255
     6f8:	09 f4       	brne	.+2      	; 0x6fc <is_food_at+0xc>
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	89 2f       	mov	r24, r25
     6fe:	08 95       	ret

00000700 <add_food_item>:
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	cf 93       	push	r28
     70a:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <numFoodItems>
     70e:	88 30       	cpi	r24, 0x08	; 8
     710:	0c f0       	brlt	.+2      	; 0x714 <add_food_item+0x14>
     712:	7d c0       	rjmp	.+250    	; 0x80e <add_food_item+0x10e>
     714:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
     718:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <srandom>
     71c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     720:	6b 01       	movw	r12, r22
     722:	7c 01       	movw	r14, r24
     724:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     728:	ab 01       	movw	r20, r22
     72a:	bc 01       	movw	r22, r24
     72c:	47 70       	andi	r20, 0x07	; 7
     72e:	55 27       	eor	r21, r21
     730:	66 27       	eor	r22, r22
     732:	70 78       	andi	r23, 0x80	; 128
     734:	77 23       	and	r23, r23
     736:	64 f4       	brge	.+24     	; 0x750 <add_food_item+0x50>
     738:	41 50       	subi	r20, 0x01	; 1
     73a:	51 09       	sbc	r21, r1
     73c:	61 09       	sbc	r22, r1
     73e:	71 09       	sbc	r23, r1
     740:	48 6f       	ori	r20, 0xF8	; 248
     742:	5f 6f       	ori	r21, 0xFF	; 255
     744:	6f 6f       	ori	r22, 0xFF	; 255
     746:	7f 6f       	ori	r23, 0xFF	; 255
     748:	4f 5f       	subi	r20, 0xFF	; 255
     74a:	5f 4f       	sbci	r21, 0xFF	; 255
     74c:	6f 4f       	sbci	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	d7 01       	movw	r26, r14
     752:	c6 01       	movw	r24, r12
     754:	8f 70       	andi	r24, 0x0F	; 15
     756:	99 27       	eor	r25, r25
     758:	aa 27       	eor	r26, r26
     75a:	b0 78       	andi	r27, 0x80	; 128
     75c:	bb 23       	and	r27, r27
     75e:	54 f4       	brge	.+20     	; 0x774 <add_food_item+0x74>
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	a1 09       	sbc	r26, r1
     764:	b1 09       	sbc	r27, r1
     766:	80 6f       	ori	r24, 0xF0	; 240
     768:	9f 6f       	ori	r25, 0xFF	; 255
     76a:	af 6f       	ori	r26, 0xFF	; 255
     76c:	bf 6f       	ori	r27, 0xFF	; 255
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	a1 1d       	adc	r26, r1
     772:	b1 1d       	adc	r27, r1
     774:	64 2f       	mov	r22, r20
     776:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     77a:	f8 2e       	mov	r15, r24
     77c:	c3 e6       	ldi	r28, 0x63	; 99
     77e:	32 c0       	rjmp	.+100    	; 0x7e4 <add_food_item+0xe4>
     780:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
     788:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     78c:	ab 01       	movw	r20, r22
     78e:	bc 01       	movw	r22, r24
     790:	47 70       	andi	r20, 0x07	; 7
     792:	55 27       	eor	r21, r21
     794:	66 27       	eor	r22, r22
     796:	70 78       	andi	r23, 0x80	; 128
     798:	77 23       	and	r23, r23
     79a:	64 f4       	brge	.+24     	; 0x7b4 <add_food_item+0xb4>
     79c:	41 50       	subi	r20, 0x01	; 1
     79e:	51 09       	sbc	r21, r1
     7a0:	61 09       	sbc	r22, r1
     7a2:	71 09       	sbc	r23, r1
     7a4:	48 6f       	ori	r20, 0xF8	; 248
     7a6:	5f 6f       	ori	r21, 0xFF	; 255
     7a8:	6f 6f       	ori	r22, 0xFF	; 255
     7aa:	7f 6f       	ori	r23, 0xFF	; 255
     7ac:	4f 5f       	subi	r20, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	6f 4f       	sbci	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	d7 01       	movw	r26, r14
     7b6:	c6 01       	movw	r24, r12
     7b8:	8f 70       	andi	r24, 0x0F	; 15
     7ba:	99 27       	eor	r25, r25
     7bc:	aa 27       	eor	r26, r26
     7be:	b0 78       	andi	r27, 0x80	; 128
     7c0:	bb 23       	and	r27, r27
     7c2:	54 f4       	brge	.+20     	; 0x7d8 <add_food_item+0xd8>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	a1 09       	sbc	r26, r1
     7c8:	b1 09       	sbc	r27, r1
     7ca:	80 6f       	ori	r24, 0xF0	; 240
     7cc:	9f 6f       	ori	r25, 0xFF	; 255
     7ce:	af 6f       	ori	r26, 0xFF	; 255
     7d0:	bf 6f       	ori	r27, 0xFF	; 255
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	a1 1d       	adc	r26, r1
     7d6:	b1 1d       	adc	r27, r1
     7d8:	64 2f       	mov	r22, r20
     7da:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
     7de:	f8 2e       	mov	r15, r24
     7e0:	c1 50       	subi	r28, 0x01	; 1
     7e2:	b9 f0       	breq	.+46     	; 0x812 <add_food_item+0x112>
     7e4:	8f 2d       	mov	r24, r15
     7e6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <is_snake_at>
     7ea:	81 11       	cpse	r24, r1
     7ec:	c9 cf       	rjmp	.-110    	; 0x780 <add_food_item+0x80>
     7ee:	8f 2d       	mov	r24, r15
     7f0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <is_food_at>
     7f4:	81 11       	cpse	r24, r1
     7f6:	c4 cf       	rjmp	.-120    	; 0x780 <add_food_item+0x80>
     7f8:	8f 2d       	mov	r24, r15
     7fa:	0e 94 b1 02 	call	0x562	; 0x562 <is_rat_at>
     7fe:	81 11       	cpse	r24, r1
     800:	bf cf       	rjmp	.-130    	; 0x780 <add_food_item+0x80>
     802:	8f 2d       	mov	r24, r15
     804:	0e 94 4b 03 	call	0x696	; 0x696 <is_super_food_at>
     808:	81 11       	cpse	r24, r1
     80a:	ba cf       	rjmp	.-140    	; 0x780 <add_food_item+0x80>
     80c:	04 c0       	rjmp	.+8      	; 0x816 <add_food_item+0x116>
     80e:	88 e0       	ldi	r24, 0x08	; 8
     810:	0f c0       	rjmp	.+30     	; 0x830 <add_food_item+0x130>
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	0d c0       	rjmp	.+26     	; 0x830 <add_food_item+0x130>
     816:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <numFoodItems>
     81a:	e8 2f       	mov	r30, r24
     81c:	08 2e       	mov	r0, r24
     81e:	00 0c       	add	r0, r0
     820:	ff 0b       	sbc	r31, r31
     822:	ea 56       	subi	r30, 0x6A	; 106
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	f0 82       	st	Z, r15
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <numFoodItems>
     82e:	8f 2d       	mov	r24, r15
     830:	cf 91       	pop	r28
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	08 95       	ret

0000083c <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     83c:	88 23       	and	r24, r24
     83e:	b4 f0       	brlt	.+44     	; 0x86c <remove_food+0x30>
     840:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <numFoodItems>
     844:	82 17       	cp	r24, r18
     846:	94 f4       	brge	.+36     	; 0x86c <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	82 17       	cp	r24, r18
     84c:	64 f4       	brge	.+24     	; 0x866 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     84e:	e8 2f       	mov	r30, r24
     850:	08 2e       	mov	r0, r24
     852:	00 0c       	add	r0, r0
     854:	ff 0b       	sbc	r31, r31
     856:	ea 56       	subi	r30, 0x6A	; 106
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	90 81       	ld	r25, Z
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	90 83       	st	Z, r25
     860:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     862:	82 17       	cp	r24, r18
     864:	a4 f3       	brlt	.-24     	; 0x84e <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     866:	21 50       	subi	r18, 0x01	; 1
     868:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <numFoodItems>
     86c:	08 95       	ret

0000086e <update_display_at_position>:

/* decreasing delay before stepping snake, begins at 600 */
volatile uint16_t move_delay = 600;

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	c8 2f       	mov	r28, r24
     876:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     878:	0e 94 d0 05 	call	0xba0	; 0xba0 <y_position>
     87c:	d8 2f       	mov	r29, r24
     87e:	8c 2f       	mov	r24, r28
     880:	0e 94 cd 05 	call	0xb9a	; 0xb9a <x_position>
     884:	41 2f       	mov	r20, r17
     886:	6d 2f       	mov	r22, r29
     888:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ledmatrix_update_pixel>
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	08 95       	ret

00000894 <super_food>:

/*
** Super food runtime
*/
void super_food(void) {
	if (get_super_food_status() && get_super_food_existence() == 0) {
     894:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <get_super_food_status>
     898:	88 23       	and	r24, r24
     89a:	61 f0       	breq	.+24     	; 0x8b4 <super_food+0x20>
     89c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <get_super_food_existence>
     8a0:	81 11       	cpse	r24, r1
     8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <super_food+0x20>
		add_super_food();
     8a4:	0e 94 b8 02 	call	0x570	; 0x570 <add_super_food>
		update_display_at_position(get_super_food_pos(), SUPERFOOD_COLOR);
     8a8:	0e 94 43 03 	call	0x686	; 0x686 <get_super_food_pos>
     8ac:	6c e3       	ldi	r22, 0x3C	; 60
     8ae:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
     8b2:	08 95       	ret
	} else if(get_super_food_status() == 0 && get_super_food_existence()) {
     8b4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <get_super_food_status>
     8b8:	81 11       	cpse	r24, r1
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <super_food+0x3e>
     8bc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <get_super_food_existence>
     8c0:	88 23       	and	r24, r24
     8c2:	39 f0       	breq	.+14     	; 0x8d2 <super_food+0x3e>
		remove_super_food();
     8c4:	0e 94 46 03 	call	0x68c	; 0x68c <remove_super_food>
		update_display_at_position(get_super_food_pos(), BACKGROUND_COLOUR);
     8c8:	0e 94 43 03 	call	0x686	; 0x686 <get_super_food_pos>
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
     8d2:	08 95       	ret

000008d4 <move_rat>:
	}
}

void move_rat(void) {
	update_display_at_position(get_rat_pos(), BACKGROUND_COLOUR);
     8d4:	0e 94 1d 02 	call	0x43a	; 0x43a <get_rat_pos>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	PosnType newPos = next_rat_pos();
     8de:	0e 94 40 02 	call	0x480	; 0x480 <next_rat_pos>
	update_display_at_position(newPos, RAT_COLOUR);
     8e2:	61 e2       	ldi	r22, 0x21	; 33
     8e4:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
     8e8:	08 95       	ret

000008ea <init_game>:
}

// Initialise game. This initialises the board with movsnake and food items 
// and puts them on the display.
void init_game(void) {
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     8ee:	0e 94 c9 05 	call	0xb92	; 0xb92 <ledmatrix_clear>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     8f2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     8f6:	0e 94 23 0b 	call	0x1646	; 0x1646 <get_snake_head_position>
     8fa:	6f e0       	ldi	r22, 0x0F	; 15
     8fc:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     900:	0e 94 2c 0b 	call	0x1658	; 0x1658 <get_snake_tail_position>
     904:	60 ef       	ldi	r22, 0xF0	; 240
     906:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     90a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <init_food>
     90e:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     910:	0e 94 80 03 	call	0x700	; 0x700 <add_food_item>
     914:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     916:	0e 94 d2 05 	call	0xba4	; 0xba4 <is_position_valid>
     91a:	88 23       	and	r24, r24
     91c:	21 f0       	breq	.+8      	; 0x926 <__stack+0x27>
			update_display_at_position(food_position, FOOD_COLOUR);
     91e:	63 e3       	ldi	r22, 0x33	; 51
     920:	8d 2f       	mov	r24, r29
     922:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
     926:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
     928:	99 f7       	brne	.-26     	; 0x910 <__stack+0x11>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}
	add_rat();
     92a:	0e 94 95 01 	call	0x32a	; 0x32a <add_rat>
	update_display_at_position(get_rat_pos(), RAT_COLOUR);
     92e:	0e 94 1d 02 	call	0x43a	; 0x43a <get_rat_pos>
     932:	61 e2       	ldi	r22, 0x21	; 33
     934:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <attempt_to_move_snake_forward>:

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     946:	0e 94 23 0b 	call	0x1646	; 0x1646 <get_snake_head_position>
     94a:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     94c:	0e 94 95 0b 	call	0x172a	; 0x172a <advance_snake_head>
     950:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     952:	88 23       	and	r24, r24
     954:	0c f4       	brge	.+2      	; 0x958 <attempt_to_move_snake_forward+0x1a>
     956:	4c c0       	rjmp	.+152    	; 0x9f0 <attempt_to_move_snake_forward+0xb2>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     958:	0e 94 23 0b 	call	0x1646	; 0x1646 <get_snake_head_position>
     95c:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_SUPER_FOOD
     95e:	c2 30       	cpi	r28, 0x02	; 2
     960:	09 f4       	brne	.+2      	; 0x964 <attempt_to_move_snake_forward+0x26>
     962:	58 c0       	rjmp	.+176    	; 0xa14 <attempt_to_move_snake_forward+0xd6>
     964:	c4 30       	cpi	r28, 0x04	; 4
     966:	09 f4       	brne	.+2      	; 0x96a <attempt_to_move_snake_forward+0x2c>
     968:	45 c0       	rjmp	.+138    	; 0x9f4 <attempt_to_move_snake_forward+0xb6>
	 || move_result == ATE_FOOD_BUT_CANT_GROW || move_result == ATE_RAT) {
     96a:	c3 30       	cpi	r28, 0x03	; 3
     96c:	09 f4       	brne	.+2      	; 0x970 <attempt_to_move_snake_forward+0x32>
     96e:	52 c0       	rjmp	.+164    	; 0xa14 <attempt_to_move_snake_forward+0xd6>
     970:	c5 30       	cpi	r28, 0x05	; 5
     972:	09 f0       	breq	.+2      	; 0x976 <attempt_to_move_snake_forward+0x38>
     974:	57 c0       	rjmp	.+174    	; 0xa24 <attempt_to_move_snake_forward+0xe6>
     976:	46 c0       	rjmp	.+140    	; 0xa04 <attempt_to_move_snake_forward+0xc6>
		// reduce step delay
		if(move_delay > 100) {
			move_delay -= 20;
     978:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     97c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
     980:	44 97       	sbiw	r24, 0x14	; 20
     982:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <move_delay+0x1>
     986:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <move_delay>
		}
		// remove food item
		if(move_result == ATE_SUPER_FOOD) {
     98a:	c4 30       	cpi	r28, 0x04	; 4
     98c:	29 f4       	brne	.+10     	; 0x998 <attempt_to_move_snake_forward+0x5a>
			remove_super_food();
     98e:	0e 94 46 03 	call	0x68c	; 0x68c <remove_super_food>
			ate_super_food();
     992:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <ate_super_food>
     996:	22 c0       	rjmp	.+68     	; 0x9dc <attempt_to_move_snake_forward+0x9e>
		}  else if(move_result == ATE_RAT) {
     998:	c5 30       	cpi	r28, 0x05	; 5
     99a:	41 f4       	brne	.+16     	; 0x9ac <attempt_to_move_snake_forward+0x6e>
			add_rat();
     99c:	0e 94 95 01 	call	0x32a	; 0x32a <add_rat>
			update_display_at_position(get_rat_pos(), RAT_COLOUR);
     9a0:	0e 94 1d 02 	call	0x43a	; 0x43a <get_rat_pos>
     9a4:	61 e2       	ldi	r22, 0x21	; 33
     9a6:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
     9aa:	18 c0       	rjmp	.+48     	; 0x9dc <attempt_to_move_snake_forward+0x9e>
		} else {
			int8_t foodID = food_at(new_head_position);
     9ac:	81 2f       	mov	r24, r17
     9ae:	0e 94 5e 03 	call	0x6bc	; 0x6bc <food_at>
			remove_food(foodID);
     9b2:	0e 94 1e 04 	call	0x83c	; 0x83c <remove_food>
			
			// Add a new food item. Might fail if a free position can't be
			// found on the board but shouldn't usually.
			PosnType new_food_posn = add_food_item();
     9b6:	0e 94 80 03 	call	0x700	; 0x700 <add_food_item>
     9ba:	08 2f       	mov	r16, r24
			if(is_position_valid(new_food_posn)) {
     9bc:	0e 94 d2 05 	call	0xba4	; 0xba4 <is_position_valid>
     9c0:	88 23       	and	r24, r24
     9c2:	21 f0       	breq	.+8      	; 0x9cc <attempt_to_move_snake_forward+0x8e>
				update_display_at_position(new_food_posn, FOOD_COLOUR);
     9c4:	63 e3       	ldi	r22, 0x33	; 51
     9c6:	80 2f       	mov	r24, r16
     9c8:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     9cc:	cd 7f       	andi	r28, 0xFD	; 253
     9ce:	c1 30       	cpi	r28, 0x01	; 1
     9d0:	29 f4       	brne	.+10     	; 0x9dc <attempt_to_move_snake_forward+0x9e>
		PosnType prev_tail_posn = advance_snake_tail();
     9d2:	0e 94 38 0b 	call	0x1670	; 0x1670 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     9dc:	60 ef       	ldi	r22, 0xF0	; 240
     9de:	8d 2f       	mov	r24, r29
     9e0:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     9e4:	6f e0       	ldi	r22, 0x0F	; 15
     9e6:	81 2f       	mov	r24, r17
     9e8:	0e 94 37 04 	call	0x86e	; 0x86e <update_display_at_position>
	return 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	31 c0       	rjmp	.+98     	; 0xa52 <attempt_to_move_snake_forward+0x114>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	2f c0       	rjmp	.+94     	; 0xa52 <attempt_to_move_snake_forward+0x114>
	}
	PosnType new_head_position = get_snake_head_position();
	if(move_result == ATE_FOOD || move_result == ATE_SUPER_FOOD
	 || move_result == ATE_FOOD_BUT_CANT_GROW || move_result == ATE_RAT) {
		// reduce step delay
		if(move_delay > 100) {
     9f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     9f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
     9fc:	85 36       	cpi	r24, 0x65	; 101
     9fe:	91 05       	cpc	r25, r1
     a00:	a0 f4       	brcc	.+40     	; 0xa2a <attempt_to_move_snake_forward+0xec>
     a02:	c5 cf       	rjmp	.-118    	; 0x98e <attempt_to_move_snake_forward+0x50>
     a04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     a08:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
     a0c:	85 36       	cpi	r24, 0x65	; 101
     a0e:	91 05       	cpc	r25, r1
     a10:	28 f2       	brcs	.-118    	; 0x99c <attempt_to_move_snake_forward+0x5e>
     a12:	15 c0       	rjmp	.+42     	; 0xa3e <attempt_to_move_snake_forward+0x100>
     a14:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     a18:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
     a1c:	85 36       	cpi	r24, 0x65	; 101
     a1e:	91 05       	cpc	r25, r1
     a20:	28 f2       	brcs	.-118    	; 0x9ac <attempt_to_move_snake_forward+0x6e>
     a22:	aa cf       	rjmp	.-172    	; 0x978 <attempt_to_move_snake_forward+0x3a>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     a24:	c1 30       	cpi	r28, 0x01	; 1
     a26:	d1 f6       	brne	.-76     	; 0x9dc <attempt_to_move_snake_forward+0x9e>
     a28:	d4 cf       	rjmp	.-88     	; 0x9d2 <attempt_to_move_snake_forward+0x94>
	PosnType new_head_position = get_snake_head_position();
	if(move_result == ATE_FOOD || move_result == ATE_SUPER_FOOD
	 || move_result == ATE_FOOD_BUT_CANT_GROW || move_result == ATE_RAT) {
		// reduce step delay
		if(move_delay > 100) {
			move_delay -= 20;
     a2a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     a2e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
     a32:	44 97       	sbiw	r24, 0x14	; 20
     a34:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <move_delay+0x1>
     a38:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <move_delay>
     a3c:	a8 cf       	rjmp	.-176    	; 0x98e <attempt_to_move_snake_forward+0x50>
     a3e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     a42:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
     a46:	44 97       	sbiw	r24, 0x14	; 20
     a48:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <move_delay+0x1>
     a4c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <move_delay>
     a50:	a5 cf       	rjmp	.-182    	; 0x99c <attempt_to_move_snake_forward+0x5e>
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <get_move_delay>:

/* Gets the current delay before snake moves */
uint16_t get_move_delay(void) {
	return move_delay;
     a5c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <move_delay>
     a60:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <move_delay+0x1>
}
     a64:	08 95       	ret

00000a66 <init_move_delay>:

/* Reset move delay to 600 */
void init_move_delay(void) {
	move_delay = 600;
     a66:	88 e5       	ldi	r24, 0x58	; 88
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <move_delay+0x1>
     a6e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <move_delay>
     a72:	08 95       	ret

00000a74 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	0e 94 4c 0c 	call	0x1898	; 0x1898 <spi_setup_master>
     a7a:	08 95       	ret

00000a7c <ledmatrix_update_pixel>:
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	80 31       	cpi	r24, 0x10	; 16
     a84:	08 f0       	brcs	.+2      	; 0xa88 <ledmatrix_update_pixel+0xc>
     a86:	5d c0       	rjmp	.+186    	; 0xb42 <ledmatrix_update_pixel+0xc6>
     a88:	68 30       	cpi	r22, 0x08	; 8
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <ledmatrix_update_pixel+0x12>
     a8c:	5a c0       	rjmp	.+180    	; 0xb42 <ledmatrix_update_pixel+0xc6>
     a8e:	d4 2f       	mov	r29, r20
     a90:	16 2f       	mov	r17, r22
     a92:	c8 2f       	mov	r28, r24
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     a9a:	81 2f       	mov	r24, r17
     a9c:	87 70       	andi	r24, 0x07	; 7
     a9e:	20 e1       	ldi	r18, 0x10	; 16
     aa0:	82 9f       	mul	r24, r18
     aa2:	c0 01       	movw	r24, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	9c 2f       	mov	r25, r28
     aa8:	9f 70       	andi	r25, 0x0F	; 15
     aaa:	89 2b       	or	r24, r25
     aac:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     ab0:	8d 2f       	mov	r24, r29
     ab2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     ab6:	df 30       	cpi	r29, 0x0F	; 15
     ab8:	21 f4       	brne	.+8      	; 0xac2 <ledmatrix_update_pixel+0x46>
     aba:	8f e1       	ldi	r24, 0x1F	; 31
     abc:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     ac0:	1d c0       	rjmp	.+58     	; 0xafc <ledmatrix_update_pixel+0x80>
     ac2:	d0 3f       	cpi	r29, 0xF0	; 240
     ac4:	21 f4       	brne	.+8      	; 0xace <ledmatrix_update_pixel+0x52>
     ac6:	80 e2       	ldi	r24, 0x20	; 32
     ac8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     acc:	17 c0       	rjmp	.+46     	; 0xafc <ledmatrix_update_pixel+0x80>
     ace:	d1 32       	cpi	r29, 0x21	; 33
     ad0:	21 f4       	brne	.+8      	; 0xada <ledmatrix_update_pixel+0x5e>
     ad2:	85 e2       	ldi	r24, 0x25	; 37
     ad4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     ad8:	11 c0       	rjmp	.+34     	; 0xafc <ledmatrix_update_pixel+0x80>
     ada:	dc 33       	cpi	r29, 0x3C	; 60
     adc:	21 f4       	brne	.+8      	; 0xae6 <ledmatrix_update_pixel+0x6a>
     ade:	84 e2       	ldi	r24, 0x24	; 36
     ae0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <ledmatrix_update_pixel+0x80>
     ae6:	d3 33       	cpi	r29, 0x33	; 51
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <ledmatrix_update_pixel+0x76>
     aea:	81 e2       	ldi	r24, 0x21	; 33
     aec:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     af0:	05 c0       	rjmp	.+10     	; 0xafc <ledmatrix_update_pixel+0x80>
     af2:	d1 11       	cpse	r29, r1
     af4:	03 c0       	rjmp	.+6      	; 0xafc <ledmatrix_update_pixel+0x80>
     af6:	8e e1       	ldi	r24, 0x1E	; 30
     af8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     afc:	6b e0       	ldi	r22, 0x0B	; 11
     afe:	61 1b       	sub	r22, r17
     b00:	85 e0       	ldi	r24, 0x05	; 5
     b02:	8c 0f       	add	r24, r28
     b04:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
     b08:	8b ed       	ldi	r24, 0xDB	; 219
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <putchar>
     b10:	85 e2       	ldi	r24, 0x25	; 37
     b12:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
     b16:	63 e0       	ldi	r22, 0x03	; 3
     b18:	82 e3       	ldi	r24, 0x32	; 50
     b1a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
     b1e:	0e 94 95 08 	call	0x112a	; 0x112a <get_score>
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	7f 93       	push	r23
     b28:	6f 93       	push	r22
     b2a:	8f e1       	ldi	r24, 0x1F	; 31
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	9f 93       	push	r25
     b30:	8f 93       	push	r24
     b32:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <printf>
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <ledmatrix_update_column>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	80 31       	cpi	r24, 0x10	; 16
     b54:	90 f4       	brcc	.+36     	; 0xb7a <ledmatrix_update_column+0x30>
     b56:	8b 01       	movw	r16, r22
     b58:	c8 2f       	mov	r28, r24
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     b60:	8c 2f       	mov	r24, r28
     b62:	8f 70       	andi	r24, 0x0F	; 15
     b64:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     b68:	e8 01       	movw	r28, r16
     b6a:	08 5f       	subi	r16, 0xF8	; 248
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
     b6e:	89 91       	ld	r24, Y+
     b70:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     b74:	c0 17       	cp	r28, r16
     b76:	d1 07       	cpc	r29, r17
     b78:	d1 f7       	brne	.-12     	; 0xb6e <ledmatrix_update_column+0x24>
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	08 95       	ret

00000b84 <ledmatrix_shift_display_left>:
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     b90:	08 95       	ret

00000b92 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     b92:	8f e0       	ldi	r24, 0x0F	; 15
     b94:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_send_byte>
     b98:	08 95       	ret

00000b9a <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     b9a:	82 95       	swap	r24
     b9c:	8f 70       	andi	r24, 0x0F	; 15
     b9e:	08 95       	ret

00000ba0 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     ba0:	8f 70       	andi	r24, 0x0F	; 15
     ba2:	08 95       	ret

00000ba4 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     ba4:	83 fb       	bst	r24, 3
     ba6:	88 27       	eor	r24, r24
     ba8:	80 f9       	bld	r24, 0
}
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	89 27       	eor	r24, r25
     bae:	08 95       	ret

00000bb0 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     bb0:	20 e1       	ldi	r18, 0x10	; 16
     bb2:	82 9f       	mul	r24, r18
     bb4:	c0 01       	movw	r24, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	67 70       	andi	r22, 0x07	; 7
}
     bba:	86 2b       	or	r24, r22
     bbc:	08 95       	ret

00000bbe <seg_display>:
/*
** Seven segment display runtime. Displays length of snake.
*/
void seg_display(void) {
	/* Set bits of port A and most significant bit of port C to be outputs*/
	DDRA = 0x01;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	87 b9       	out	0x07, r24	; 7
	
	/* Set up timer for an interrupt every 10 milliseconds. */
	OCR1A = 9999; /* CLK / 8 */
     bc6:	8f e0       	ldi	r24, 0x0F	; 15
     bc8:	97 e2       	ldi	r25, 0x27	; 39
     bca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0; /* CTC mode */
     bd2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM12)|(1<<CS11); /* Divide clock by 8 */
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	TIMSK1 = (1<<OCIE1A); /* Enable interrupt on timer on output compare match */
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TIFR1 = (1<<OCF1A); /* Ensure interrupt flag is cleared */
     be2:	86 bb       	out	0x16, r24	; 22
     be4:	08 95       	ret

00000be6 <__vector_13>:
}

ISR(TIMER1_COMPA_vect) {
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	if(get_snake_length() <= 9) {
     c08:	0e 94 35 0b 	call	0x166a	; 0x166a <get_snake_length>
     c0c:	8a 30       	cpi	r24, 0x0A	; 10
     c0e:	50 f4       	brcc	.+20     	; 0xc24 <__vector_13+0x3e>
		PORTA = 0;
     c10:	12 b8       	out	0x02, r1	; 2
		PORTC = seven_seg_data[get_snake_length()];
     c12:	0e 94 35 0b 	call	0x166a	; 0x166a <get_snake_length>
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ea 5f       	subi	r30, 0xFA	; 250
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	80 81       	ld	r24, Z
     c20:	88 b9       	out	0x08, r24	; 8
     c22:	4e c0       	rjmp	.+156    	; 0xcc0 <__vector_13+0xda>
	} else {
		/* Alternates showing digit */
		seven_seg_cc = 1 ^ seven_seg_cc;
     c24:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <seven_seg_cc>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	89 27       	eor	r24, r25
     c2c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <seven_seg_cc>
		
		/* Display a digit */
		if((get_snake_length())/10 <= 9 && (get_snake_length())%10 <= 9) {
     c30:	0e 94 35 0b 	call	0x166a	; 0x166a <get_snake_length>
     c34:	84 36       	cpi	r24, 0x64	; 100
     c36:	d0 f5       	brcc	.+116    	; 0xcac <__vector_13+0xc6>
     c38:	0e 94 35 0b 	call	0x166a	; 0x166a <get_snake_length>
     c3c:	9d ec       	ldi	r25, 0xCD	; 205
     c3e:	89 9f       	mul	r24, r25
     c40:	91 2d       	mov	r25, r1
     c42:	11 24       	eor	r1, r1
     c44:	96 95       	lsr	r25
     c46:	96 95       	lsr	r25
     c48:	96 95       	lsr	r25
     c4a:	99 0f       	add	r25, r25
     c4c:	29 2f       	mov	r18, r25
     c4e:	22 0f       	add	r18, r18
     c50:	22 0f       	add	r18, r18
     c52:	92 0f       	add	r25, r18
     c54:	89 1b       	sub	r24, r25
     c56:	8a 30       	cpi	r24, 0x0A	; 10
     c58:	48 f5       	brcc	.+82     	; 0xcac <__vector_13+0xc6>
			if(seven_seg_cc == 0) {
     c5a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <seven_seg_cc>
     c5e:	81 11       	cpse	r24, r1
     c60:	16 c0       	rjmp	.+44     	; 0xc8e <__vector_13+0xa8>
				/* Display right digit*/
				PORTC = seven_seg_data[get_snake_length()%10];
     c62:	0e 94 35 0b 	call	0x166a	; 0x166a <get_snake_length>
     c66:	9d ec       	ldi	r25, 0xCD	; 205
     c68:	89 9f       	mul	r24, r25
     c6a:	91 2d       	mov	r25, r1
     c6c:	11 24       	eor	r1, r1
     c6e:	96 95       	lsr	r25
     c70:	96 95       	lsr	r25
     c72:	96 95       	lsr	r25
     c74:	99 0f       	add	r25, r25
     c76:	29 2f       	mov	r18, r25
     c78:	22 0f       	add	r18, r18
     c7a:	22 0f       	add	r18, r18
     c7c:	92 0f       	add	r25, r18
     c7e:	89 1b       	sub	r24, r25
     c80:	e8 2f       	mov	r30, r24
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	ea 5f       	subi	r30, 0xFA	; 250
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	80 81       	ld	r24, Z
     c8a:	88 b9       	out	0x08, r24	; 8
     c8c:	16 c0       	rjmp	.+44     	; 0xcba <__vector_13+0xd4>
			} else {
				/* Display left digit*/
				PORTC = seven_seg_data[get_snake_length()/10];
     c8e:	0e 94 35 0b 	call	0x166a	; 0x166a <get_snake_length>
     c92:	ed ec       	ldi	r30, 0xCD	; 205
     c94:	8e 9f       	mul	r24, r30
     c96:	e1 2d       	mov	r30, r1
     c98:	11 24       	eor	r1, r1
     c9a:	e6 95       	lsr	r30
     c9c:	e6 95       	lsr	r30
     c9e:	e6 95       	lsr	r30
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ea 5f       	subi	r30, 0xFA	; 250
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	80 81       	ld	r24, Z
     ca8:	88 b9       	out	0x08, r24	; 8
     caa:	07 c0       	rjmp	.+14     	; 0xcba <__vector_13+0xd4>
			}
		} else {
			if(seven_seg_cc == 0) {
     cac:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <seven_seg_cc>
     cb0:	81 11       	cpse	r24, r1
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <__vector_13+0xd2>
				/* Display right digit */
				PORTC = 0x00;
     cb4:	18 b8       	out	0x08, r1	; 8
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <__vector_13+0xd4>
			} else {
				/* Display left digit */
				PORTC = 0x00;
     cb8:	18 b8       	out	0x08, r1	; 8
			}
		}
		PORTA = seven_seg_cc;
     cba:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <seven_seg_cc>
     cbe:	82 b9       	out	0x02, r24	; 2
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     ce2:	0e 94 3a 05 	call	0xa74	; 0xa74 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     ce6:	0e 94 05 01 	call	0x20a	; 0x20a <init_button_interrupts>
	// Initialise joystick interrupts
	//initADC();
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	7b e4       	ldi	r23, 0x4B	; 75
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     cf8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <init_timer0>
	
	// Turn on global interrupts
	sei();
     cfc:	78 94       	sei
     cfe:	08 95       	ret

00000d00 <terminal_display>:
}

void terminal_display(void) {
     d00:	cf 93       	push	r28
	char block = 219;
	for(int8_t x = 4; x < (BOARD_WIDTH+6); x++) {
     d02:	c4 e0       	ldi	r28, 0x04	; 4
		move_cursor(x, (BOARD_HEIGHT + 4));
     d04:	6c e0       	ldi	r22, 0x0C	; 12
     d06:	8c 2f       	mov	r24, r28
     d08:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
		printf("%c", block);
     d0c:	8b ed       	ldi	r24, 0xDB	; 219
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <putchar>
		
		move_cursor(x, 3);
     d14:	63 e0       	ldi	r22, 0x03	; 3
     d16:	8c 2f       	mov	r24, r28
     d18:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
		printf("%c", block);
     d1c:	8b ed       	ldi	r24, 0xDB	; 219
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <putchar>
     d24:	cf 5f       	subi	r28, 0xFF	; 255
	sei();
}

void terminal_display(void) {
	char block = 219;
	for(int8_t x = 4; x < (BOARD_WIDTH+6); x++) {
     d26:	c6 31       	cpi	r28, 0x16	; 22
     d28:	69 f7       	brne	.-38     	; 0xd04 <terminal_display+0x4>
     d2a:	c4 e0       	ldi	r28, 0x04	; 4
		move_cursor(x, 3);
		printf("%c", block);
		
	}
	for(int8_t y = 4; y < (BOARD_HEIGHT + 5); y++) {
		move_cursor((BOARD_WIDTH + 5), y);
     d2c:	6c 2f       	mov	r22, r28
     d2e:	85 e1       	ldi	r24, 0x15	; 21
     d30:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
		printf("%c", block);
     d34:	8b ed       	ldi	r24, 0xDB	; 219
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <putchar>
		
		move_cursor(4, y);
     d3c:	6c 2f       	mov	r22, r28
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
		printf("%c", block);
     d44:	8b ed       	ldi	r24, 0xDB	; 219
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <putchar>
     d4c:	cf 5f       	subi	r28, 0xFF	; 255
		
		move_cursor(x, 3);
		printf("%c", block);
		
	}
	for(int8_t y = 4; y < (BOARD_HEIGHT + 5); y++) {
     d4e:	cd 30       	cpi	r28, 0x0D	; 13
     d50:	69 f7       	brne	.-38     	; 0xd2c <terminal_display+0x2c>
		printf("%c", block);
		
		move_cursor(4, y);
		printf("%c", block);
	}
}
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <splash_screen>:

void splash_screen(void) {
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
	clear_terminal();
     d66:	0e 94 93 0c 	call	0x1926	; 0x1926 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     d6a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <hide_cursor>
	move_cursor(3,3);
     d6e:	63 e0       	ldi	r22, 0x03	; 3
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
	printf_P(PSTR("Snake"));
     d76:	8d ec       	ldi	r24, 0xCD	; 205
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
	
	move_cursor(3,5);
     d82:	65 e0       	ldi	r22, 0x05	; 5
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Hans Song"));	
     d90:	84 ea       	ldi	r24, 0xA4	; 164
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     d9c:	85 e2       	ldi	r24, 0x25	; 37
     d9e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     da2:	0e 94 c9 05 	call	0xb92	; 0xb92 <ledmatrix_clear>
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     dae:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     db0:	0f 2e       	mov	r0, r31
     db2:	ff e0       	ldi	r31, 0x0F	; 15
     db4:	ff 2e       	mov	r15, r31
     db6:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     db8:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     dba:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     dbc:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE 44374264", colour);
     dbe:	6c 2f       	mov	r22, r28
     dc0:	8a e2       	ldi	r24, 0x2A	; 42
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	0e 94 9e 08 	call	0x113c	; 0x113c <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dca:	2f e7       	ldi	r18, 0x7F	; 127
     dcc:	8c e2       	ldi	r24, 0x2C	; 44
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	80 40       	sbci	r24, 0x00	; 0
     dd4:	90 40       	sbci	r25, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <splash_screen+0x7a>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <splash_screen+0x84>
     dda:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     ddc:	0e 94 16 01 	call	0x22c	; 0x22c <button_pushed>
     de0:	8f 3f       	cpi	r24, 0xFF	; 255
     de2:	a9 f5       	brne	.+106    	; 0xe4e <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE 44374264", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     de4:	0e 94 ad 08 	call	0x115a	; 0x115a <scroll_display>
     de8:	81 11       	cpse	r24, r1
     dea:	ef cf       	rjmp	.-34     	; 0xdca <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     dec:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	83 70       	andi	r24, 0x03	; 3
     df6:	99 27       	eor	r25, r25
     df8:	aa 27       	eor	r26, r26
     dfa:	b0 78       	andi	r27, 0x80	; 128
     dfc:	bb 23       	and	r27, r27
     dfe:	54 f4       	brge	.+20     	; 0xe14 <splash_screen+0xbe>
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	a1 09       	sbc	r26, r1
     e04:	b1 09       	sbc	r27, r1
     e06:	8c 6f       	ori	r24, 0xFC	; 252
     e08:	9f 6f       	ori	r25, 0xFF	; 255
     e0a:	af 6f       	ori	r26, 0xFF	; 255
     e0c:	bf 6f       	ori	r27, 0xFF	; 255
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	a1 1d       	adc	r26, r1
     e12:	b1 1d       	adc	r27, r1
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	a1 05       	cpc	r26, r1
     e1a:	b1 05       	cpc	r27, r1
     e1c:	91 f0       	breq	.+36     	; 0xe42 <splash_screen+0xec>
     e1e:	2c f4       	brge	.+10     	; 0xe2a <splash_screen+0xd4>
     e20:	89 2b       	or	r24, r25
     e22:	8a 2b       	or	r24, r26
     e24:	8b 2b       	or	r24, r27
     e26:	59 f0       	breq	.+22     	; 0xe3e <splash_screen+0xe8>
     e28:	ca cf       	rjmp	.-108    	; 0xdbe <splash_screen+0x68>
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	91 05       	cpc	r25, r1
     e2e:	a1 05       	cpc	r26, r1
     e30:	b1 05       	cpc	r27, r1
     e32:	49 f0       	breq	.+18     	; 0xe46 <splash_screen+0xf0>
     e34:	03 97       	sbiw	r24, 0x03	; 3
     e36:	a1 05       	cpc	r26, r1
     e38:	b1 05       	cpc	r27, r1
     e3a:	39 f0       	breq	.+14     	; 0xe4a <splash_screen+0xf4>
     e3c:	c0 cf       	rjmp	.-128    	; 0xdbe <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     e3e:	cd 2f       	mov	r28, r29
     e40:	be cf       	rjmp	.-132    	; 0xdbe <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     e42:	cf 2d       	mov	r28, r15
     e44:	bc cf       	rjmp	.-136    	; 0xdbe <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     e46:	c0 2f       	mov	r28, r16
     e48:	ba cf       	rjmp	.-140    	; 0xdbe <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     e4a:	c1 2f       	mov	r28, r17
     e4c:	b8 cf       	rjmp	.-144    	; 0xdbe <splash_screen+0x68>
		}
	}
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	08 95       	ret

00000e5a <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     e5a:	0e 94 93 0c 	call	0x1926	; 0x1926 <clear_terminal>
	
	// Initialise the game and display
	init_game();
     e5e:	0e 94 75 04 	call	0x8ea	; 0x8ea <init_game>
		
	// Initialise the score
	init_score();
     e62:	0e 94 77 08 	call	0x10ee	; 0x10ee <init_score>
	
	// Initialise seven segment display
	seg_display();
     e66:	0e 94 df 05 	call	0xbbe	; 0xbbe <seg_display>
	
	// Initialize joystick handler
	init_joystick();
     e6a:	0e 94 bd 0a 	call	0x157a	; 0x157a <init_joystick>
	
	// Reset move delay
	init_move_delay();
     e6e:	0e 94 33 05 	call	0xa66	; 0xa66 <init_move_delay>
	
	terminal_display();
     e72:	0e 94 80 06 	call	0xd00	; 0xd00 <terminal_display>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     e76:	0e 94 13 01 	call	0x226	; 0x226 <empty_button_queue>
	clear_serial_input_buffer();
     e7a:	0e 94 23 0a 	call	0x1446	; 0x1446 <clear_serial_input_buffer>
     e7e:	08 95       	ret

00000e80 <handle_game_over>:
		}
	}
	// If we get here the game is over. 
}

void handle_game_over() {
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
	move_cursor(10,14);
     e84:	6e e0       	ldi	r22, 0x0E	; 14
     e86:	8a e0       	ldi	r24, 0x0A	; 10
     e88:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     e8c:	8a e9       	ldi	r24, 0x9A	; 154
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
	move_cursor(10,15);
     e98:	6f e0       	ldi	r22, 0x0F	; 15
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     ea0:	8c e7       	ldi	r24, 0x7C	; 124
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
	while(button_pushed() == -1) {
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
		char serial_input = fgetc(stdin);
     eb4:	c2 eb       	ldi	r28, 0xB2	; 178
     eb6:	d2 e0       	ldi	r29, 0x02	; 2
	move_cursor(10,14);
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == -1) {
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <handle_game_over+0x4c>
		char serial_input = fgetc(stdin);
     eba:	88 81       	ld	r24, Y
     ebc:	99 81       	ldd	r25, Y+1	; 0x01
     ebe:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <fgetc>
		if (serial_input == 'n' || serial_input == 'N') {
     ec2:	8f 7d       	andi	r24, 0xDF	; 223
     ec4:	8e 34       	cpi	r24, 0x4E	; 78
     ec6:	11 f4       	brne	.+4      	; 0xecc <handle_game_over+0x4c>
			reset_game();
     ec8:	0e 94 6d 07 	call	0xeda	; 0xeda <reset_game>
	move_cursor(10,14);
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == -1) {
     ecc:	0e 94 16 01 	call	0x22c	; 0x22c <button_pushed>
     ed0:	8f 3f       	cpi	r24, 0xFF	; 255
     ed2:	99 f3       	breq	.-26     	; 0xeba <handle_game_over+0x3a>
			reset_game();
		}
		; // wait until a button has been pushed
	}
	
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <reset_game>:
	}
}

void reset_game(void) {
	while (1){
		new_game();
     eda:	0e 94 2d 07 	call	0xe5a	; 0xe5a <new_game>
		play_game();
     ede:	0e 94 74 07 	call	0xee8	; 0xee8 <play_game>
		handle_game_over();
     ee2:	0e 94 40 07 	call	0xe80	; 0xe80 <handle_game_over>
     ee6:	f9 cf       	rjmp	.-14     	; 0xeda <reset_game>

00000ee8 <play_game>:
	// Delete any pending button pushes or serial input
	empty_button_queue();
	clear_serial_input_buffer();
}

void play_game(void) {
     ee8:	2f 92       	push	r2
     eea:	3f 92       	push	r3
     eec:	4f 92       	push	r4
     eee:	5f 92       	push	r5
     ef0:	6f 92       	push	r6
     ef2:	7f 92       	push	r7
     ef4:	8f 92       	push	r8
     ef6:	9f 92       	push	r9
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
     f0c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
     f10:	6b 01       	movw	r12, r22
     f12:	7c 01       	movw	r14, r24
	last_rat_move = get_clock_ticks();
     f14:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
     f18:	4b 01       	movw	r8, r22
     f1a:	5c 01       	movw	r10, r24
void play_game(void) {
	uint32_t last_move_time;
	uint32_t last_rat_move;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     f1c:	21 2c       	mov	r2, r1
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     f1e:	33 24       	eor	r3, r3
     f20:	3a 94       	dec	r3
	last_rat_move = get_clock_ticks();
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.
	while(1) {
		super_food();
     f22:	0e 94 4a 04 	call	0x894	; 0x894 <super_food>
		
		int16_t joystick_x = read_joystick(0);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0e 94 c9 0a 	call	0x1592	; 0x1592 <read_joystick>
     f2c:	ec 01       	movw	r28, r24
		int16_t joystick_y = read_joystick(1);
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 c9 0a 	call	0x1592	; 0x1592 <read_joystick>
     f34:	3c 01       	movw	r6, r24
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     f36:	0e 94 16 01 	call	0x22c	; 0x22c <button_pushed>
     f3a:	18 2f       	mov	r17, r24
		if(button == -1) {
     f3c:	8f 3f       	cpi	r24, 0xFF	; 255
     f3e:	09 f0       	breq	.+2      	; 0xf42 <play_game+0x5a>
     f40:	ae c0       	rjmp	.+348    	; 0x109e <play_game+0x1b6>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     f42:	0e 94 1c 0a 	call	0x1438	; 0x1438 <serial_input_available>
     f46:	88 23       	and	r24, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <play_game+0x64>
     f4a:	97 c0       	rjmp	.+302    	; 0x107a <play_game+0x192>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     f4c:	e2 eb       	ldi	r30, 0xB2	; 178
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     f58:	21 10       	cpse	r2, r1
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <play_game+0x7e>
     f5c:	8b 31       	cpi	r24, 0x1B	; 27
     f5e:	09 f4       	brne	.+2      	; 0xf62 <play_game+0x7a>
     f60:	8e c0       	rjmp	.+284    	; 0x107e <play_game+0x196>
     f62:	93 2d       	mov	r25, r3
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <play_game+0x98>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	2f 12       	cpse	r2, r31
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <play_game+0x8e>
     f6c:	8b 35       	cpi	r24, 0x5B	; 91
     f6e:	09 f4       	brne	.+2      	; 0xf72 <play_game+0x8a>
     f70:	8a c0       	rjmp	.+276    	; 0x1086 <play_game+0x19e>
     f72:	93 2d       	mov	r25, r3
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <play_game+0x98>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     f76:	22 e0       	ldi	r18, 0x02	; 2
     f78:	22 12       	cpse	r2, r18
     f7a:	8a c0       	rjmp	.+276    	; 0x1090 <play_game+0x1a8>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     f7c:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     f7e:	83 2d       	mov	r24, r3
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C' || joystick_x <= 200) {
     f80:	93 34       	cpi	r25, 0x43	; 67
     f82:	29 f0       	breq	.+10     	; 0xf8e <play_game+0xa6>
     f84:	90 c0       	rjmp	.+288    	; 0x10a6 <play_game+0x1be>
     f86:	c9 3c       	cpi	r28, 0xC9	; 201
     f88:	d1 05       	cpc	r29, r1
     f8a:	44 f4       	brge	.+16     	; 0xf9c <play_game+0xb4>
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <play_game+0xac>
     f8e:	21 2c       	mov	r2, r1
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <play_game+0xac>
     f92:	21 2c       	mov	r2, r1
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 4f 0b 	call	0x169e	; 0x169e <set_snake_dirn>
     f9a:	41 c0       	rjmp	.+130    	; 0x101e <play_game+0x136>
		} else  if (button==2 || escape_sequence_char == 'A' || joystick_y >= 800) {
     f9c:	12 30       	cpi	r17, 0x02	; 2
     f9e:	49 f0       	breq	.+18     	; 0xfb2 <play_game+0xca>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     fa0:	93 2d       	mov	r25, r3
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     fa2:	83 2d       	mov	r24, r3
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C' || joystick_x <= 200) {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A' || joystick_y >= 800) {
     fa4:	91 34       	cpi	r25, 0x41	; 65
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <play_game+0xca>
     fa8:	30 e2       	ldi	r19, 0x20	; 32
     faa:	63 16       	cp	r6, r19
     fac:	33 e0       	ldi	r19, 0x03	; 3
     fae:	73 06       	cpc	r7, r19
     fb0:	24 f0       	brlt	.+8      	; 0xfba <play_game+0xd2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 4f 0b 	call	0x169e	; 0x169e <set_snake_dirn>
     fb8:	32 c0       	rjmp	.+100    	; 0x101e <play_game+0x136>
		} else if(button==3 || escape_sequence_char=='D' || joystick_x >= 800) {
     fba:	13 30       	cpi	r17, 0x03	; 3
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <play_game+0xe0>
     fbe:	94 34       	cpi	r25, 0x44	; 68
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <play_game+0xe0>
     fc2:	c0 32       	cpi	r28, 0x20	; 32
     fc4:	d3 40       	sbci	r29, 0x03	; 3
     fc6:	24 f0       	brlt	.+8      	; 0xfd0 <play_game+0xe8>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	0e 94 4f 0b 	call	0x169e	; 0x169e <set_snake_dirn>
     fce:	27 c0       	rjmp	.+78     	; 0x101e <play_game+0x136>
		} else if (button==1 || escape_sequence_char == 'B' || joystick_y <= 200) {
     fd0:	11 30       	cpi	r17, 0x01	; 1
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <play_game+0xf8>
     fd4:	92 34       	cpi	r25, 0x42	; 66
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <play_game+0xf8>
     fd8:	59 ec       	ldi	r21, 0xC9	; 201
     fda:	65 16       	cp	r6, r21
     fdc:	71 04       	cpc	r7, r1
     fde:	24 f4       	brge	.+8      	; 0xfe8 <play_game+0x100>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	0e 94 4f 0b 	call	0x169e	; 0x169e <set_snake_dirn>
     fe6:	1b c0       	rjmp	.+54     	; 0x101e <play_game+0x136>
		} else if(serial_input == 'p' || serial_input == 'P') {
     fe8:	8f 7d       	andi	r24, 0xDF	; 223
     fea:	80 35       	cpi	r24, 0x50	; 80
     fec:	a1 f4       	brne	.+40     	; 0x1016 <play_game+0x12e>
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <play_game+0x11a>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			while ((serial_input = fgetc(stdin))) {
				//move_cursor(3,3);
				//printf("game paused");
				// safeguard to clear any unwanted button presses
				empty_button_queue();
     ff0:	0e 94 13 01 	call	0x226	; 0x226 <empty_button_queue>
				if (serial_input == 'p' || serial_input == 'P') {
     ff4:	cf 7d       	andi	r28, 0xDF	; 223
     ff6:	c0 35       	cpi	r28, 0x50	; 80
     ff8:	91 f0       	breq	.+36     	; 0x101e <play_game+0x136>
					//move_cursor(3,3);
					//printf("           ");
					break;
				} else if (serial_input == 'n' || serial_input == 'N') {
     ffa:	ce 34       	cpi	r28, 0x4E	; 78
     ffc:	11 f4       	brne	.+4      	; 0x1002 <play_game+0x11a>
					reset_game();
     ffe:	0e 94 6d 07 	call	0xeda	; 0xeda <reset_game>
		} else if (button==1 || escape_sequence_char == 'B' || joystick_y <= 200) {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			while ((serial_input = fgetc(stdin))) {
    1002:	e2 eb       	ldi	r30, 0xB2	; 178
    1004:	f2 e0       	ldi	r31, 0x02	; 2
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <fgetc>
    100e:	c8 2f       	mov	r28, r24
    1010:	81 11       	cpse	r24, r1
    1012:	ee cf       	rjmp	.-36     	; 0xff0 <play_game+0x108>
    1014:	04 c0       	rjmp	.+8      	; 0x101e <play_game+0x136>
					break;
				} else if (serial_input == 'n' || serial_input == 'N') {
					reset_game();
				}
			}
		} else if(serial_input == 'n' || serial_input == 'N') {
    1016:	8e 34       	cpi	r24, 0x4E	; 78
    1018:	11 f4       	brne	.+4      	; 0x101e <play_game+0x136>
			reset_game();
    101a:	0e 94 6d 07 	call	0xeda	; 0xeda <reset_game>
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing		
		
		if(get_clock_ticks() >= last_rat_move + 1000) {
    101e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
    1022:	95 01       	movw	r18, r10
    1024:	84 01       	movw	r16, r8
    1026:	08 51       	subi	r16, 0x18	; 24
    1028:	1c 4f       	sbci	r17, 0xFC	; 252
    102a:	2f 4f       	sbci	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	60 17       	cp	r22, r16
    1030:	71 07       	cpc	r23, r17
    1032:	82 07       	cpc	r24, r18
    1034:	93 07       	cpc	r25, r19
    1036:	30 f0       	brcs	.+12     	; 0x1044 <play_game+0x15c>
			move_rat();
    1038:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <move_rat>
			last_rat_move = get_clock_ticks();
    103c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
    1040:	4b 01       	movw	r8, r22
    1042:	5c 01       	movw	r10, r24
		}
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_move_delay()) {
    1044:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
    1048:	2b 01       	movw	r4, r22
    104a:	3c 01       	movw	r6, r24
    104c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <get_move_delay>
    1050:	a7 01       	movw	r20, r14
    1052:	96 01       	movw	r18, r12
    1054:	28 0f       	add	r18, r24
    1056:	39 1f       	adc	r19, r25
    1058:	41 1d       	adc	r20, r1
    105a:	51 1d       	adc	r21, r1
    105c:	42 16       	cp	r4, r18
    105e:	53 06       	cpc	r5, r19
    1060:	64 06       	cpc	r6, r20
    1062:	75 06       	cpc	r7, r21
    1064:	08 f4       	brcc	.+2      	; 0x1068 <play_game+0x180>
    1066:	5d cf       	rjmp	.-326    	; 0xf22 <play_game+0x3a>
			// move_delay seconds has passed since the last time we moved the snake (default 600),
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    1068:	0e 94 9f 04 	call	0x93e	; 0x93e <attempt_to_move_snake_forward>
    106c:	88 23       	and	r24, r24
    106e:	09 f1       	breq	.+66     	; 0x10b2 <play_game+0x1ca>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    1070:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
    1074:	6b 01       	movw	r12, r22
    1076:	7c 01       	movw	r14, r24
    1078:	54 cf       	rjmp	.-344    	; 0xf22 <play_game+0x3a>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    107a:	83 2d       	mov	r24, r3
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <play_game+0x1aa>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    107e:	22 24       	eor	r2, r2
    1080:	23 94       	inc	r2
					serial_input = -1; // Don't further process this character
    1082:	83 2d       	mov	r24, r3
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <play_game+0x1aa>
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1086:	68 94       	set
    1088:	22 24       	eor	r2, r2
    108a:	21 f8       	bld	r2, 1
					serial_input = -1; // Don't further process this character
    108c:	83 2d       	mov	r24, r3
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <play_game+0x1aa>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1090:	21 2c       	mov	r2, r1
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C' || joystick_x <= 200) {
    1092:	c9 3c       	cpi	r28, 0xC9	; 201
    1094:	d1 05       	cpc	r29, r1
    1096:	0c f4       	brge	.+2      	; 0x109a <play_game+0x1b2>
    1098:	7d cf       	rjmp	.-262    	; 0xf94 <play_game+0xac>
    109a:	93 2d       	mov	r25, r3
    109c:	85 cf       	rjmp	.-246    	; 0xfa8 <play_game+0xc0>
    109e:	88 23       	and	r24, r24
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <play_game+0x1bc>
    10a2:	78 cf       	rjmp	.-272    	; 0xf94 <play_game+0xac>
    10a4:	70 cf       	rjmp	.-288    	; 0xf86 <play_game+0x9e>
    10a6:	c9 3c       	cpi	r28, 0xC9	; 201
    10a8:	d1 05       	cpc	r29, r1
    10aa:	0c f4       	brge	.+2      	; 0x10ae <play_game+0x1c6>
    10ac:	72 cf       	rjmp	.-284    	; 0xf92 <play_game+0xaa>
    10ae:	21 2c       	mov	r2, r1
    10b0:	79 cf       	rjmp	.-270    	; 0xfa4 <play_game+0xbc>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	af 90       	pop	r10
    10c6:	9f 90       	pop	r9
    10c8:	8f 90       	pop	r8
    10ca:	7f 90       	pop	r7
    10cc:	6f 90       	pop	r6
    10ce:	5f 90       	pop	r5
    10d0:	4f 90       	pop	r4
    10d2:	3f 90       	pop	r3
    10d4:	2f 90       	pop	r2
    10d6:	08 95       	ret

000010d8 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    10d8:	0e 94 71 06 	call	0xce2	; 0xce2 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    10dc:	0e 94 ab 06 	call	0xd56	; 0xd56 <splash_screen>
	
	while(1) {
		new_game();
    10e0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <new_game>
		play_game();
    10e4:	0e 94 74 07 	call	0xee8	; 0xee8 <play_game>
		handle_game_over();
    10e8:	0e 94 40 07 	call	0xe80	; 0xe80 <handle_game_over>
    10ec:	f9 cf       	rjmp	.-14     	; 0x10e0 <main+0x8>

000010ee <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    10ee:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <score>
    10f2:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <score+0x1>
    10f6:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <score+0x2>
    10fa:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <score+0x3>
    10fe:	08 95       	ret

00001100 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1100:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <score>
    1104:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <score+0x1>
    1108:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <score+0x2>
    110c:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <score+0x3>
    1110:	48 0f       	add	r20, r24
    1112:	59 1f       	adc	r21, r25
    1114:	61 1d       	adc	r22, r1
    1116:	71 1d       	adc	r23, r1
    1118:	40 93 57 01 	sts	0x0157, r20	; 0x800157 <score>
    111c:	50 93 58 01 	sts	0x0158, r21	; 0x800158 <score+0x1>
    1120:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <score+0x2>
    1124:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <score+0x3>
    1128:	08 95       	ret

0000112a <get_score>:
}

uint32_t get_score(void) {
	return score;
    112a:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <score>
    112e:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <score+0x1>
    1132:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <score+0x2>
    1136:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <score+0x3>
}
    113a:	08 95       	ret

0000113c <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    113c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <colour>
	display_string = string_to_display;
    1140:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <display_string+0x1>
    1144:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <display_string>
	next_col_ptr = 0;
    1148:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <next_col_ptr+0x1>
    114c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <next_col_ptr>
	next_char_to_display = 0;
    1150:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <next_char_to_display+0x1>
    1154:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <next_char_to_display>
    1158:	08 95       	ret

0000115a <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	28 97       	sbiw	r28, 0x08	; 8
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1172:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <next_col_ptr>
    1176:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <next_col_ptr+0x1>
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	81 f0       	breq	.+32     	; 0x119e <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    117e:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1180:	10 ff       	sbrs	r17, 0
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1184:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <next_col_ptr+0x1>
    1188:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    118c:	00 e0       	ldi	r16, 0x00	; 0
    118e:	6b c0       	rjmp	.+214    	; 0x1266 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1190:	31 96       	adiw	r30, 0x01	; 1
    1192:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <next_col_ptr+0x1>
    1196:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    119a:	00 e0       	ldi	r16, 0x00	; 0
    119c:	64 c0       	rjmp	.+200    	; 0x1266 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    119e:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <next_char_to_display>
    11a2:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <next_char_to_display+0x1>
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f4       	brne	.+2      	; 0x11ac <scroll_display+0x52>
    11aa:	49 c0       	rjmp	.+146    	; 0x123e <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    11ac:	cf 01       	movw	r24, r30
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <next_char_to_display+0x1>
    11b4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <next_char_to_display>
    11b8:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    11ba:	e1 11       	cpse	r30, r1
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    11be:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <next_char_to_display+0x1>
    11c2:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <next_char_to_display>
			shift_countdown = 16;
    11c6:	80 e1       	ldi	r24, 0x10	; 16
    11c8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11cc:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    11ce:	10 e0       	ldi	r17, 0x00	; 0
    11d0:	4a c0       	rjmp	.+148    	; 0x1266 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    11d2:	8f e9       	ldi	r24, 0x9F	; 159
    11d4:	8e 0f       	add	r24, r30
    11d6:	8a 31       	cpi	r24, 0x1A	; 26
    11d8:	70 f4       	brcc	.+28     	; 0x11f6 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	eb 5d       	subi	r30, 0xDB	; 219
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	85 91       	lpm	r24, Z+
    11e6:	94 91       	lpm	r25, Z
    11e8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <next_col_ptr+0x1>
    11ec:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11f0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    11f2:	10 e0       	ldi	r17, 0x00	; 0
    11f4:	38 c0       	rjmp	.+112    	; 0x1266 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    11f6:	8f eb       	ldi	r24, 0xBF	; 191
    11f8:	8e 0f       	add	r24, r30
    11fa:	8a 31       	cpi	r24, 0x1A	; 26
    11fc:	70 f4       	brcc	.+28     	; 0x121a <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	eb 59       	subi	r30, 0x9B	; 155
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	85 91       	lpm	r24, Z+
    120a:	94 91       	lpm	r25, Z
    120c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <next_col_ptr+0x1>
    1210:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1214:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	26 c0       	rjmp	.+76     	; 0x1266 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    121a:	80 ed       	ldi	r24, 0xD0	; 208
    121c:	8e 0f       	add	r24, r30
    121e:	8a 30       	cpi	r24, 0x0A	; 10
    1220:	00 f5       	brcc	.+64     	; 0x1262 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ed 58       	subi	r30, 0x8D	; 141
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	85 91       	lpm	r24, Z+
    122e:	94 91       	lpm	r25, Z
    1230:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <next_col_ptr+0x1>
    1234:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1238:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    123e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <display_string>
    1242:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1246:	01 e0       	ldi	r16, 0x01	; 1
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	09 f0       	breq	.+2      	; 0x124e <scroll_display+0xf4>
    124c:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    124e:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <next_char_to_display+0x1>
    1252:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <next_char_to_display>
		display_string = 0;
    1256:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <display_string+0x1>
    125a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    125e:	10 e0       	ldi	r17, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1262:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1264:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1266:	0e 94 c2 05 	call	0xb84	; 0xb84 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    126a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <colour>
    126e:	fe 01       	movw	r30, r28
    1270:	38 96       	adiw	r30, 0x08	; 8
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1276:	11 23       	and	r17, r17
    1278:	14 f4       	brge	.+4      	; 0x127e <scroll_display+0x124>
			column_colour_data[i] = colour;
    127a:	20 83       	st	Z, r18
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    127e:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1280:	11 0f       	add	r17, r17
    1282:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1284:	e8 17       	cp	r30, r24
    1286:	f9 07       	cpc	r31, r25
    1288:	b1 f7       	brne	.-20     	; 0x1276 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    128a:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    128c:	be 01       	movw	r22, r28
    128e:	6f 5f       	subi	r22, 0xFF	; 255
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	8f e0       	ldi	r24, 0x0F	; 15
    1294:	0e 94 a5 05 	call	0xb4a	; 0xb4a <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1298:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <shift_countdown.1854>
    129c:	88 23       	and	r24, r24
    129e:	89 f0       	breq	.+34     	; 0x12c2 <scroll_display+0x168>
		shift_countdown--;
    12a0:	81 50       	subi	r24, 0x01	; 1
    12a2:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    12a6:	00 23       	and	r16, r16
    12a8:	11 f0       	breq	.+4      	; 0x12ae <scroll_display+0x154>
    12aa:	88 23       	and	r24, r24
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <scroll_display+0x158>
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <scroll_display+0x15e>
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <scroll_display+0x15e>
    12b6:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	99 23       	and	r25, r25
    12bc:	29 f0       	breq	.+10     	; 0x12c8 <scroll_display+0x16e>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    12c2:	00 23       	and	r16, r16
    12c4:	a1 f3       	breq	.-24     	; 0x12ae <scroll_display+0x154>
    12c6:	f7 cf       	rjmp	.-18     	; 0x12b6 <scroll_display+0x15c>
	return !finished;
}
    12c8:	28 96       	adiw	r28, 0x08	; 8
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	08 95       	ret

000012de <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    12de:	cf 93       	push	r28
    12e0:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    12e2:	8a 30       	cpi	r24, 0x0A	; 10
    12e4:	19 f4       	brne	.+6      	; 0x12ec <uart_put_char+0xe>
		uart_put_char('\r', stream);
    12e6:	8d e0       	ldi	r24, 0x0D	; 13
    12e8:	0e 94 6f 09 	call	0x12de	; 0x12de <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    12ec:	9f b7       	in	r25, 0x3f	; 63
    12ee:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    12f2:	99 23       	and	r25, r25
    12f4:	29 f1       	breq	.+74     	; 0x1340 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    12f6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	d1 f3       	breq	.-12     	; 0x12f2 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    12fe:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1300:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <out_insert_pos>
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	8e 0f       	add	r24, r30
    1308:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <out_insert_pos>
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	e0 56       	subi	r30, 0x60	; 96
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1314:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    131e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <out_insert_pos>
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	11 f4       	brne	.+4      	; 0x132a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1326:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    132a:	e1 ec       	ldi	r30, 0xC1	; 193
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 62       	ori	r24, 0x20	; 32
    1332:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1334:	99 23       	and	r25, r25
    1336:	39 f0       	breq	.+14     	; 0x1346 <uart_put_char+0x68>
		sei();
    1338:	78 94       	sei
	}
	return 0;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	05 c0       	rjmp	.+10     	; 0x134a <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
}
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    134e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    1352:	88 23       	and	r24, r24
    1354:	e1 f3       	breq	.-8      	; 0x134e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1356:	2f b7       	in	r18, 0x3f	; 63
    1358:	20 78       	andi	r18, 0x80	; 128
	cli();
    135a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    135c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <input_insert_pos>
    1360:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	83 1b       	sub	r24, r19
    1368:	91 09       	sbc	r25, r1
    136a:	5a f4       	brpl	.+22     	; 0x1382 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    136c:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <input_insert_pos>
    1370:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	e8 1b       	sub	r30, r24
    1378:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    137a:	e0 55       	subi	r30, 0x50	; 80
    137c:	fd 4f       	sbci	r31, 0xFD	; 253
    137e:	80 81       	ld	r24, Z
    1380:	0a c0       	rjmp	.+20     	; 0x1396 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1382:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <input_insert_pos>
    1386:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	e8 1b       	sub	r30, r24
    138e:	f1 09       	sbc	r31, r1
    1390:	e0 56       	subi	r30, 0x60	; 96
    1392:	fd 4f       	sbci	r31, 0xFD	; 253
    1394:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1396:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    139a:	91 50       	subi	r25, 0x01	; 1
    139c:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    13a0:	22 23       	and	r18, r18
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <uart_get_char+0x58>
		sei();
    13a4:	78 94       	sei
	}	
	return c;
}
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	08 95       	ret

000013aa <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    13aa:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <out_insert_pos>
	bytes_in_out_buffer = 0;
    13ae:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <bytes_in_out_buffer>
	input_insert_pos = 0;
    13b2:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <input_insert_pos>
	bytes_in_input_buffer = 0;
    13b6:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <bytes_in_input_buffer>
	input_overrun = 0;
    13ba:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    13be:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	aa 1f       	adc	r26, r26
    13cc:	bb 1f       	adc	r27, r27
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	aa 1f       	adc	r26, r26
    13d4:	bb 1f       	adc	r27, r27
    13d6:	9c 01       	movw	r18, r24
    13d8:	ad 01       	movw	r20, r26
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	44 1f       	adc	r20, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	72 e1       	ldi	r23, 0x12	; 18
    13e6:	8a e7       	ldi	r24, 0x7A	; 122
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodsi4>
    13ee:	ba 01       	movw	r22, r20
    13f0:	a9 01       	movw	r20, r18
    13f2:	4f 5f       	subi	r20, 0xFF	; 255
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	6f 4f       	sbci	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	db 01       	movw	r26, r22
    13fc:	ca 01       	movw	r24, r20
    13fe:	1a f4       	brpl	.+6      	; 0x1406 <init_serial_stdio+0x5c>
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	a1 1d       	adc	r26, r1
    1404:	b1 1d       	adc	r27, r1
    1406:	b5 95       	asr	r27
    1408:	a7 95       	ror	r26
    140a:	97 95       	ror	r25
    140c:	87 95       	ror	r24
    140e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1410:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1414:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1418:	e1 ec       	ldi	r30, 0xC1	; 193
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	88 e1       	ldi	r24, 0x18	; 24
    141e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1420:	80 81       	ld	r24, Z
    1422:	80 68       	ori	r24, 0x80	; 128
    1424:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1426:	e2 eb       	ldi	r30, 0xB2	; 178
    1428:	f2 e0       	ldi	r31, 0x02	; 2
    142a:	81 e1       	ldi	r24, 0x11	; 17
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	93 83       	std	Z+3, r25	; 0x03
    1430:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	08 95       	ret

00001438 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1438:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	91 11       	cpse	r25, r1
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <serial_input_available+0xc>
    1442:	80 e0       	ldi	r24, 0x00	; 0
}
    1444:	08 95       	ret

00001446 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1446:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <input_insert_pos>
	bytes_in_input_buffer = 0;
    144a:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <bytes_in_input_buffer>
    144e:	08 95       	ret

00001450 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	2f 93       	push	r18
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1464:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
    1468:	88 23       	and	r24, r24
    146a:	29 f1       	breq	.+74     	; 0x14b6 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    146c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <out_insert_pos>
    1470:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <bytes_in_out_buffer>
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	82 1b       	sub	r24, r18
    1478:	91 09       	sbc	r25, r1
    147a:	5a f4       	brpl	.+22     	; 0x1492 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    147c:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <out_insert_pos>
    1480:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	e8 1b       	sub	r30, r24
    1488:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    148a:	e1 56       	subi	r30, 0x61	; 97
    148c:	fd 4f       	sbci	r31, 0xFD	; 253
    148e:	90 81       	ld	r25, Z
    1490:	0a c0       	rjmp	.+20     	; 0x14a6 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1492:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <out_insert_pos>
    1496:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	e8 1b       	sub	r30, r24
    149e:	f1 09       	sbc	r31, r1
    14a0:	e0 56       	subi	r30, 0x60	; 96
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    14a6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
    14aa:	81 50       	subi	r24, 0x01	; 1
    14ac:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    14b0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    14b6:	e1 ec       	ldi	r30, 0xC1	; 193
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7d       	andi	r24, 0xDF	; 223
    14be:	80 83       	st	Z, r24
	}
}
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	cf 93       	push	r28
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    14f8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    14fc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <do_echo>
    1500:	88 23       	and	r24, r24
    1502:	49 f0       	breq	.+18     	; 0x1516 <__vector_20+0x42>
    1504:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <bytes_in_out_buffer>
    1508:	8f 3f       	cpi	r24, 0xFF	; 255
    150a:	29 f0       	breq	.+10     	; 0x1516 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	8c 2f       	mov	r24, r28
    1512:	0e 94 6f 09 	call	0x12de	; 0x12de <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1516:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    151a:	80 31       	cpi	r24, 0x10	; 16
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__vector_20+0x52>
		input_overrun = 1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <input_overrun>
    1524:	18 c0       	rjmp	.+48     	; 0x1556 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1526:	cd 30       	cpi	r28, 0x0D	; 13
    1528:	09 f4       	brne	.+2      	; 0x152c <__vector_20+0x58>
			c = '\n';
    152a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    152c:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <input_insert_pos>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	8e 0f       	add	r24, r30
    1534:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <input_insert_pos>
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	e0 56       	subi	r30, 0x60	; 96
    153c:	fd 4f       	sbci	r31, 0xFD	; 253
    153e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1540:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <bytes_in_input_buffer>
    1544:	8f 5f       	subi	r24, 0xFF	; 255
    1546:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    154a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <input_insert_pos>
    154e:	80 31       	cpi	r24, 0x10	; 16
    1550:	11 f4       	brne	.+4      	; 0x1556 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1552:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <input_insert_pos>
		}
	}
}
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	cf 91       	pop	r28
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	0f 90       	pop	r0
    1576:	1f 90       	pop	r1
    1578:	18 95       	reti

0000157a <init_joystick>:

void init_joystick(void) {	
	/* Set up the serial port for stdin communication at 19200 baud, no echo */
	init_serial_stdio(19200,0);
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	7b e4       	ldi	r23, 0x4B	; 75
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 d5 09 	call	0x13aa	; 0x13aa <init_serial_stdio>
	
	/* Turn on global interrupts */
	sei();
    1588:	78 94       	sei
	
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    158a:	86 e8       	ldi	r24, 0x86	; 134
    158c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1590:	08 95       	ret

00001592 <read_joystick>:
}

int16_t read_joystick(int8_t dirn) {
	ADMUX = 0;
    1592:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	if(dirn == 0) {
    1596:	81 11       	cpse	r24, r1
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <read_joystick+0x14>
		ADMUX |= 0b01000101;
    159a:	ec e7       	ldi	r30, 0x7C	; 124
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	85 64       	ori	r24, 0x45	; 69
    15a2:	80 83       	st	Z, r24
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <read_joystick+0x1e>
	} else {
		ADMUX |= 0b01000100;
    15a6:	ec e7       	ldi	r30, 0x7C	; 124
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	84 64       	ori	r24, 0x44	; 68
    15ae:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    15b0:	ea e7       	ldi	r30, 0x7A	; 122
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 64       	ori	r24, 0x40	; 64
    15b8:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC)) {
    15ba:	80 81       	ld	r24, Z
    15bc:	86 fd       	sbrc	r24, 6
    15be:	fd cf       	rjmp	.-6      	; 0x15ba <read_joystick+0x28>
		; /* Wait until conversion finished */
	}
	uint16_t value = ADC; // read the value
    15c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    15c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return value;
}
    15c8:	08 95       	ret

000015ca <init_snake>:
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_clock_ticks>
    15d8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <srandom>
    15dc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
    15e0:	2d e0       	ldi	r18, 0x0D	; 13
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodsi4>
    15ec:	f6 2e       	mov	r15, r22
    15ee:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <random>
    15f2:	22 e0       	ldi	r18, 0x02	; 2
    15f4:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <snakeLength>
    15f8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <snakeTailIndex>
    15fc:	d1 e0       	ldi	r29, 0x01	; 1
    15fe:	d0 93 66 01 	sts	0x0166, r29	; 0x800166 <snakeHeadIndex>
    1602:	26 e0       	ldi	r18, 0x06	; 6
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodsi4>
    160e:	c1 e0       	ldi	r28, 0x01	; 1
    1610:	c6 0f       	add	r28, r22
    1612:	6c 2f       	mov	r22, r28
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	8f 0d       	add	r24, r15
    1618:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
    161c:	08 e6       	ldi	r16, 0x68	; 104
    161e:	11 e0       	ldi	r17, 0x01	; 1
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24
    1624:	6c 2f       	mov	r22, r28
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	8f 0d       	add	r24, r15
    162a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
    162e:	f8 01       	movw	r30, r16
    1630:	81 83       	std	Z+1, r24	; 0x01
    1632:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <curSnakeDirn>
    1636:	d0 93 63 01 	sts	0x0163, r29	; 0x800163 <nextSnakeDirn>
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	08 95       	ret

00001646 <get_snake_head_position>:
    1646:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <snakeHeadIndex>
    164a:	0e 2e       	mov	r0, r30
    164c:	00 0c       	add	r0, r0
    164e:	ff 0b       	sbc	r31, r31
    1650:	e8 59       	subi	r30, 0x98	; 152
    1652:	fe 4f       	sbci	r31, 0xFE	; 254
    1654:	80 81       	ld	r24, Z
    1656:	08 95       	ret

00001658 <get_snake_tail_position>:
    1658:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <snakeTailIndex>
    165c:	0e 2e       	mov	r0, r30
    165e:	00 0c       	add	r0, r0
    1660:	ff 0b       	sbc	r31, r31
    1662:	e8 59       	subi	r30, 0x98	; 152
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	80 81       	ld	r24, Z
    1668:	08 95       	ret

0000166a <get_snake_length>:
    166a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <snakeLength>
    166e:	08 95       	ret

00001670 <advance_snake_tail>:
    1670:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <snakeTailIndex>
    1674:	e9 2f       	mov	r30, r25
    1676:	09 2e       	mov	r0, r25
    1678:	00 0c       	add	r0, r0
    167a:	ff 0b       	sbc	r31, r31
    167c:	e8 59       	subi	r30, 0x98	; 152
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	80 81       	ld	r24, Z
    1682:	9f 5f       	subi	r25, 0xFF	; 255
    1684:	91 32       	cpi	r25, 0x21	; 33
    1686:	19 f0       	breq	.+6      	; 0x168e <advance_snake_tail+0x1e>
    1688:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <snakeTailIndex>
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <advance_snake_tail+0x22>
    168e:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <snakeTailIndex>
    1692:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <snakeLength>
    1696:	91 50       	subi	r25, 0x01	; 1
    1698:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <snakeLength>
    169c:	08 95       	ret

0000169e <set_snake_dirn>:
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	29 f4       	brne	.+10     	; 0x16ac <set_snake_dirn+0xe>
    16a2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <curSnakeDirn>
    16a6:	99 23       	and	r25, r25
    16a8:	c1 f0       	breq	.+48     	; 0x16da <set_snake_dirn+0x3c>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <set_snake_dirn+0x36>
    16ac:	81 11       	cpse	r24, r1
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <set_snake_dirn+0x1c>
    16b0:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <curSnakeDirn>
    16b4:	92 30       	cpi	r25, 0x02	; 2
    16b6:	71 f4       	brne	.+28     	; 0x16d4 <set_snake_dirn+0x36>
    16b8:	10 c0       	rjmp	.+32     	; 0x16da <set_snake_dirn+0x3c>
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	29 f4       	brne	.+10     	; 0x16c8 <set_snake_dirn+0x2a>
    16be:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <curSnakeDirn>
    16c2:	91 30       	cpi	r25, 0x01	; 1
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <set_snake_dirn+0x36>
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <set_snake_dirn+0x3c>
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	39 f4       	brne	.+14     	; 0x16da <set_snake_dirn+0x3c>
    16cc:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <curSnakeDirn>
    16d0:	93 30       	cpi	r25, 0x03	; 3
    16d2:	19 f0       	breq	.+6      	; 0x16da <set_snake_dirn+0x3c>
    16d4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <nextSnakeDirn>
    16d8:	08 95       	ret
    16da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <curSnakeDirn>
    16de:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <nextSnakeDirn>
    16e2:	08 95       	ret

000016e4 <is_snake_at>:
    16e4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <snakeTailIndex>
    16e8:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <snakeHeadIndex>
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <is_snake_at+0x26>
    16f0:	e9 2f       	mov	r30, r25
    16f2:	09 2e       	mov	r0, r25
    16f4:	00 0c       	add	r0, r0
    16f6:	ff 0b       	sbc	r31, r31
    16f8:	e8 59       	subi	r30, 0x98	; 152
    16fa:	fe 4f       	sbci	r31, 0xFE	; 254
    16fc:	20 81       	ld	r18, Z
    16fe:	28 17       	cp	r18, r24
    1700:	89 f0       	breq	.+34     	; 0x1724 <is_snake_at+0x40>
    1702:	9f 5f       	subi	r25, 0xFF	; 255
    1704:	91 32       	cpi	r25, 0x21	; 33
    1706:	0c f0       	brlt	.+2      	; 0x170a <is_snake_at+0x26>
    1708:	94 2f       	mov	r25, r20
    170a:	93 13       	cpse	r25, r19
    170c:	f1 cf       	rjmp	.-30     	; 0x16f0 <is_snake_at+0xc>
    170e:	e3 2f       	mov	r30, r19
    1710:	33 0f       	add	r19, r19
    1712:	ff 0b       	sbc	r31, r31
    1714:	e8 59       	subi	r30, 0x98	; 152
    1716:	fe 4f       	sbci	r31, 0xFE	; 254
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	20 81       	ld	r18, Z
    171c:	28 17       	cp	r18, r24
    171e:	19 f0       	breq	.+6      	; 0x1726 <is_snake_at+0x42>
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <is_snake_at+0x42>
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	89 2f       	mov	r24, r25
    1728:	08 95       	ret

0000172a <advance_snake_head>:
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <snakeLength>
    1732:	81 32       	cpi	r24, 0x21	; 33
    1734:	08 f0       	brcs	.+2      	; 0x1738 <advance_snake_head+0xe>
    1736:	aa c0       	rjmp	.+340    	; 0x188c <advance_snake_head+0x162>
    1738:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <snakeHeadIndex>
    173c:	0e 2e       	mov	r0, r30
    173e:	00 0c       	add	r0, r0
    1740:	ff 0b       	sbc	r31, r31
    1742:	e8 59       	subi	r30, 0x98	; 152
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	80 81       	ld	r24, Z
    1748:	0e 94 cd 05 	call	0xb9a	; 0xb9a <x_position>
    174c:	d8 2f       	mov	r29, r24
    174e:	c8 2f       	mov	r28, r24
    1750:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <snakeHeadIndex>
    1754:	0e 2e       	mov	r0, r30
    1756:	00 0c       	add	r0, r0
    1758:	ff 0b       	sbc	r31, r31
    175a:	e8 59       	subi	r30, 0x98	; 152
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	80 81       	ld	r24, Z
    1760:	0e 94 d0 05 	call	0xba0	; 0xba0 <y_position>
    1764:	68 2f       	mov	r22, r24
    1766:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <nextSnakeDirn>
    176a:	91 30       	cpi	r25, 0x01	; 1
    176c:	a1 f0       	breq	.+40     	; 0x1796 <advance_snake_head+0x6c>
    176e:	48 f0       	brcs	.+18     	; 0x1782 <advance_snake_head+0x58>
    1770:	92 30       	cpi	r25, 0x02	; 2
    1772:	61 f0       	breq	.+24     	; 0x178c <advance_snake_head+0x62>
    1774:	93 30       	cpi	r25, 0x03	; 3
    1776:	d9 f4       	brne	.+54     	; 0x17ae <advance_snake_head+0x84>
    1778:	d1 30       	cpi	r29, 0x01	; 1
    177a:	91 f0       	breq	.+36     	; 0x17a0 <advance_snake_head+0x76>
    177c:	cf ef       	ldi	r28, 0xFF	; 255
    177e:	cd 0f       	add	r28, r29
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <advance_snake_head+0x84>
    1782:	87 30       	cpi	r24, 0x07	; 7
    1784:	79 f0       	breq	.+30     	; 0x17a4 <advance_snake_head+0x7a>
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	68 0f       	add	r22, r24
    178a:	11 c0       	rjmp	.+34     	; 0x17ae <advance_snake_head+0x84>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	61 f0       	breq	.+24     	; 0x17a8 <advance_snake_head+0x7e>
    1790:	6f ef       	ldi	r22, 0xFF	; 255
    1792:	68 0f       	add	r22, r24
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <advance_snake_head+0x84>
    1796:	df 30       	cpi	r29, 0x0F	; 15
    1798:	49 f0       	breq	.+18     	; 0x17ac <advance_snake_head+0x82>
    179a:	c1 e0       	ldi	r28, 0x01	; 1
    179c:	cd 0f       	add	r28, r29
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <advance_snake_head+0x84>
    17a0:	c0 e1       	ldi	r28, 0x10	; 16
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <advance_snake_head+0x84>
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <advance_snake_head+0x84>
    17a8:	68 e0       	ldi	r22, 0x08	; 8
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <advance_snake_head+0x84>
    17ac:	c0 e0       	ldi	r28, 0x00	; 0
    17ae:	8c 2f       	mov	r24, r28
    17b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <position>
    17b4:	c8 2f       	mov	r28, r24
    17b6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <nextSnakeDirn>
    17ba:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <curSnakeDirn>
    17be:	8c 2f       	mov	r24, r28
    17c0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <is_snake_at>
    17c4:	88 23       	and	r24, r24
    17c6:	b1 f0       	breq	.+44     	; 0x17f4 <advance_snake_head+0xca>
    17c8:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <snakeTailIndex>
    17cc:	0e 2e       	mov	r0, r30
    17ce:	00 0c       	add	r0, r0
    17d0:	ff 0b       	sbc	r31, r31
    17d2:	e8 59       	subi	r30, 0x98	; 152
    17d4:	fe 4f       	sbci	r31, 0xFE	; 254
    17d6:	80 81       	ld	r24, Z
    17d8:	c8 17       	cp	r28, r24
    17da:	61 f0       	breq	.+24     	; 0x17f4 <advance_snake_head+0xca>
    17dc:	0e 94 93 0c 	call	0x1926	; 0x1926 <clear_terminal>
    17e0:	63 e0       	ldi	r22, 0x03	; 3
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <move_cursor>
    17e8:	89 e3       	ldi	r24, 0x39	; 57
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <puts>
    17f0:	8e ef       	ldi	r24, 0xFE	; 254
    17f2:	4f c0       	rjmp	.+158    	; 0x1892 <advance_snake_head+0x168>
    17f4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <snakeHeadIndex>
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
    17fa:	81 32       	cpi	r24, 0x21	; 33
    17fc:	19 f0       	breq	.+6      	; 0x1804 <advance_snake_head+0xda>
    17fe:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <snakeHeadIndex>
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <advance_snake_head+0xde>
    1804:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <snakeHeadIndex>
    1808:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <snakeHeadIndex>
    180c:	0e 2e       	mov	r0, r30
    180e:	00 0c       	add	r0, r0
    1810:	ff 0b       	sbc	r31, r31
    1812:	e8 59       	subi	r30, 0x98	; 152
    1814:	fe 4f       	sbci	r31, 0xFE	; 254
    1816:	c0 83       	st	Z, r28
    1818:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <snakeLength>
    181c:	8f 5f       	subi	r24, 0xFF	; 255
    181e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <snakeLength>
    1822:	8c 2f       	mov	r24, r28
    1824:	0e 94 78 03 	call	0x6f0	; 0x6f0 <is_food_at>
    1828:	81 11       	cpse	r24, r1
    182a:	0a c0       	rjmp	.+20     	; 0x1840 <advance_snake_head+0x116>
    182c:	8c 2f       	mov	r24, r28
    182e:	0e 94 4b 03 	call	0x696	; 0x696 <is_super_food_at>
    1832:	81 11       	cpse	r24, r1
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <advance_snake_head+0x116>
    1836:	8c 2f       	mov	r24, r28
    1838:	0e 94 b1 02 	call	0x562	; 0x562 <is_rat_at>
    183c:	88 23       	and	r24, r24
    183e:	01 f1       	breq	.+64     	; 0x1880 <advance_snake_head+0x156>
    1840:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <snakeLength>
    1844:	81 32       	cpi	r24, 0x21	; 33
    1846:	20 f5       	brcc	.+72     	; 0x1890 <advance_snake_head+0x166>
    1848:	8c 2f       	mov	r24, r28
    184a:	0e 94 4b 03 	call	0x696	; 0x696 <is_super_food_at>
    184e:	88 23       	and	r24, r24
    1850:	31 f0       	breq	.+12     	; 0x185e <advance_snake_head+0x134>
    1852:	8a e0       	ldi	r24, 0x0A	; 10
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 80 08 	call	0x1100	; 0x1100 <add_to_score>
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	1a c0       	rjmp	.+52     	; 0x1892 <advance_snake_head+0x168>
    185e:	8c 2f       	mov	r24, r28
    1860:	0e 94 b1 02 	call	0x562	; 0x562 <is_rat_at>
    1864:	88 23       	and	r24, r24
    1866:	31 f0       	breq	.+12     	; 0x1874 <advance_snake_head+0x14a>
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 80 08 	call	0x1100	; 0x1100 <add_to_score>
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <advance_snake_head+0x168>
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 80 08 	call	0x1100	; 0x1100 <add_to_score>
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <advance_snake_head+0x168>
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 80 08 	call	0x1100	; 0x1100 <add_to_score>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <advance_snake_head+0x168>
    188c:	8d ef       	ldi	r24, 0xFD	; 253
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <advance_snake_head+0x168>
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1898:	94 b1       	in	r25, 0x04	; 4
    189a:	90 6b       	ori	r25, 0xB0	; 176
    189c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    189e:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    18a0:	90 e5       	ldi	r25, 0x50	; 80
    18a2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <spi_setup_master+0x18>
    18a8:	80 32       	cpi	r24, 0x20	; 32
    18aa:	11 f0       	breq	.+4      	; 0x18b0 <spi_setup_master+0x18>
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	19 f4       	brne	.+6      	; 0x18b6 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	9d bd       	out	0x2d, r25	; 45
			break;
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    18b6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    18b8:	80 32       	cpi	r24, 0x20	; 32
    18ba:	69 f0       	breq	.+26     	; 0x18d6 <spi_setup_master+0x3e>
    18bc:	28 f4       	brcc	.+10     	; 0x18c8 <spi_setup_master+0x30>
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	71 f0       	breq	.+28     	; 0x18de <spi_setup_master+0x46>
    18c2:	80 31       	cpi	r24, 0x10	; 16
    18c4:	61 f0       	breq	.+24     	; 0x18de <spi_setup_master+0x46>
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <spi_setup_master+0x4c>
    18c8:	80 34       	cpi	r24, 0x40	; 64
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <spi_setup_master+0x3e>
    18cc:	80 38       	cpi	r24, 0x80	; 128
    18ce:	51 f4       	brne	.+20     	; 0x18e4 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    18d0:	8c b5       	in	r24, 0x2c	; 44
    18d2:	81 60       	ori	r24, 0x01	; 1
    18d4:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    18d6:	8c b5       	in	r24, 0x2c	; 44
    18d8:	82 60       	ori	r24, 0x02	; 2
    18da:	8c bd       	out	0x2c, r24	; 44
			break;
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    18de:	8c b5       	in	r24, 0x2c	; 44
    18e0:	81 60       	ori	r24, 0x01	; 1
    18e2:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    18e4:	2c 98       	cbi	0x05, 4	; 5
    18e6:	08 95       	ret

000018e8 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    18e8:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    18ea:	0d b4       	in	r0, 0x2d	; 45
    18ec:	07 fe       	sbrs	r0, 7
    18ee:	fd cf       	rjmp	.-6      	; 0x18ea <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    18f0:	8e b5       	in	r24, 0x2e	; 46
    18f2:	08 95       	ret

000018f4 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    18f4:	28 2f       	mov	r18, r24
    18f6:	08 2e       	mov	r0, r24
    18f8:	00 0c       	add	r0, r0
    18fa:	33 0b       	sbc	r19, r19
    18fc:	3f 93       	push	r19
    18fe:	8f 93       	push	r24
    1900:	86 2f       	mov	r24, r22
    1902:	06 2e       	mov	r0, r22
    1904:	00 0c       	add	r0, r0
    1906:	99 0b       	sbc	r25, r25
    1908:	9f 93       	push	r25
    190a:	6f 93       	push	r22
    190c:	83 ec       	ldi	r24, 0xC3	; 195
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	9f 93       	push	r25
    1912:	8f 93       	push	r24
    1914:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	08 95       	ret

00001926 <clear_terminal>:
    1926:	8e eb       	ldi	r24, 0xBE	; 190
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	9f 93       	push	r25
    192c:	8f 93       	push	r24
    192e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	08 95       	ret

00001938 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1938:	1f 92       	push	r1
    193a:	8f 93       	push	r24
    193c:	88 eb       	ldi	r24, 0xB8	; 184
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	08 95       	ret

00001952 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1952:	81 eb       	ldi	r24, 0xB1	; 177
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	9f 93       	push	r25
    1958:	8f 93       	push	r24
    195a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <printf_P>
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	08 95       	ret

00001964 <init_timer0>:
    1964:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <clock_ticks>
    1968:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <clock_ticks+0x1>
    196c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <clock_ticks+0x2>
    1970:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <clock_ticks+0x3>
    1974:	16 bc       	out	0x26, r1	; 38
    1976:	8c e7       	ldi	r24, 0x7C	; 124
    1978:	87 bd       	out	0x27, r24	; 39
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	84 bd       	out	0x24, r24	; 36
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	85 bd       	out	0x25, r24	; 37
    1982:	ee e6       	ldi	r30, 0x6E	; 110
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	80 83       	st	Z, r24
    198c:	85 b3       	in	r24, 0x15	; 21
    198e:	82 70       	andi	r24, 0x02	; 2
    1990:	85 bb       	out	0x15, r24	; 21
    1992:	08 95       	ret

00001994 <get_clock_ticks>:
    1994:	2f b7       	in	r18, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <clock_ticks>
    199c:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <clock_ticks+0x1>
    19a0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <clock_ticks+0x2>
    19a4:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <clock_ticks+0x3>
    19a8:	22 23       	and	r18, r18
    19aa:	0c f4       	brge	.+2      	; 0x19ae <get_clock_ticks+0x1a>
    19ac:	78 94       	sei
    19ae:	08 95       	ret

000019b0 <__vector_16>:
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <clock_ticks>
    19d6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <clock_ticks+0x1>
    19da:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <clock_ticks+0x2>
    19de:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <clock_ticks+0x3>
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	b1 1d       	adc	r27, r1
    19e8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <clock_ticks>
    19ec:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <clock_ticks+0x1>
    19f0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <clock_ticks+0x2>
    19f4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <clock_ticks+0x3>
    19f8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <super_food_timer>
    19fc:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <super_food_timer+0x1>
    1a00:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <super_food_timer+0x2>
    1a04:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <super_food_timer+0x3>
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	b1 1d       	adc	r27, r1
    1a0e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <super_food_timer>
    1a12:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <super_food_timer+0x1>
    1a16:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <super_food_timer+0x2>
    1a1a:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <super_food_timer+0x3>
    1a1e:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <super_food_timer>
    1a22:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <super_food_timer+0x1>
    1a26:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <super_food_timer+0x2>
    1a2a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <super_food_timer+0x3>
    1a2e:	20 e2       	ldi	r18, 0x20	; 32
    1a30:	3e e4       	ldi	r19, 0x4E	; 78
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
    1a3a:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <super_food_timer>
    1a3e:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <super_food_timer+0x1>
    1a42:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <super_food_timer+0x2>
    1a46:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <super_food_timer+0x3>
    1a4a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <super_food_timer>
    1a4e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <super_food_timer+0x1>
    1a52:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <super_food_timer+0x2>
    1a56:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <super_food_timer+0x3>
    1a5a:	0b 97       	sbiw	r24, 0x0b	; 11
    1a5c:	a1 05       	cpc	r26, r1
    1a5e:	b1 05       	cpc	r27, r1
    1a60:	20 f4       	brcc	.+8      	; 0x1a6a <__vector_16+0xba>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <super_food_status>
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <__vector_16+0xd8>
    1a6a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <super_food_timer>
    1a6e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <super_food_timer+0x1>
    1a72:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <super_food_timer+0x2>
    1a76:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <super_food_timer+0x3>
    1a7a:	88 38       	cpi	r24, 0x88	; 136
    1a7c:	93 41       	sbci	r25, 0x13	; 19
    1a7e:	a1 05       	cpc	r26, r1
    1a80:	b1 05       	cpc	r27, r1
    1a82:	10 f0       	brcs	.+4      	; 0x1a88 <__vector_16+0xd8>
    1a84:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <super_food_status>
    1a88:	ff 91       	pop	r31
    1a8a:	ef 91       	pop	r30
    1a8c:	bf 91       	pop	r27
    1a8e:	af 91       	pop	r26
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	7f 91       	pop	r23
    1a96:	6f 91       	pop	r22
    1a98:	5f 91       	pop	r21
    1a9a:	4f 91       	pop	r20
    1a9c:	3f 91       	pop	r19
    1a9e:	2f 91       	pop	r18
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <get_super_food_status>:
    1aaa:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <super_food_status>
    1aae:	08 95       	ret

00001ab0 <reset_superfood_status>:
    1ab0:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <super_food_status>
    1ab4:	08 95       	ret

00001ab6 <ate_super_food>:
    1ab6:	88 e8       	ldi	r24, 0x88	; 136
    1ab8:	93 e1       	ldi	r25, 0x13	; 19
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <super_food_timer>
    1ac2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <super_food_timer+0x1>
    1ac6:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <super_food_timer+0x2>
    1aca:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <super_food_timer+0x3>
    1ace:	08 95       	ret

00001ad0 <__udivmodsi4>:
    1ad0:	a1 e2       	ldi	r26, 0x21	; 33
    1ad2:	1a 2e       	mov	r1, r26
    1ad4:	aa 1b       	sub	r26, r26
    1ad6:	bb 1b       	sub	r27, r27
    1ad8:	fd 01       	movw	r30, r26
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <__udivmodsi4_ep>

00001adc <__udivmodsi4_loop>:
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	ee 1f       	adc	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	a2 17       	cp	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	e4 07       	cpc	r30, r20
    1aea:	f5 07       	cpc	r31, r21
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__udivmodsi4_ep>
    1aee:	a2 1b       	sub	r26, r18
    1af0:	b3 0b       	sbc	r27, r19
    1af2:	e4 0b       	sbc	r30, r20
    1af4:	f5 0b       	sbc	r31, r21

00001af6 <__udivmodsi4_ep>:
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a 94       	dec	r1
    1b00:	69 f7       	brne	.-38     	; 0x1adc <__udivmodsi4_loop>
    1b02:	60 95       	com	r22
    1b04:	70 95       	com	r23
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	bd 01       	movw	r22, r26
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret

00001b14 <__divmodsi4>:
    1b14:	05 2e       	mov	r0, r21
    1b16:	97 fb       	bst	r25, 7
    1b18:	1e f4       	brtc	.+6      	; 0x1b20 <__divmodsi4+0xc>
    1b1a:	00 94       	com	r0
    1b1c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__negsi2>
    1b20:	57 fd       	sbrc	r21, 7
    1b22:	07 d0       	rcall	.+14     	; 0x1b32 <__divmodsi4_neg2>
    1b24:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
    1b28:	07 fc       	sbrc	r0, 7
    1b2a:	03 d0       	rcall	.+6      	; 0x1b32 <__divmodsi4_neg2>
    1b2c:	4e f4       	brtc	.+18     	; 0x1b40 <__divmodsi4_exit>
    1b2e:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__negsi2>

00001b32 <__divmodsi4_neg2>:
    1b32:	50 95       	com	r21
    1b34:	40 95       	com	r20
    1b36:	30 95       	com	r19
    1b38:	21 95       	neg	r18
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b3e:	5f 4f       	sbci	r21, 0xFF	; 255

00001b40 <__divmodsi4_exit>:
    1b40:	08 95       	ret

00001b42 <__negsi2>:
    1b42:	90 95       	com	r25
    1b44:	80 95       	com	r24
    1b46:	70 95       	com	r23
    1b48:	61 95       	neg	r22
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	08 95       	ret

00001b52 <random_r>:
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	ec 01       	movw	r28, r24
    1b68:	68 81       	ld	r22, Y
    1b6a:	79 81       	ldd	r23, Y+1	; 0x01
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	61 15       	cp	r22, r1
    1b72:	71 05       	cpc	r23, r1
    1b74:	81 05       	cpc	r24, r1
    1b76:	91 05       	cpc	r25, r1
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <random_r+0x30>
    1b7a:	64 e2       	ldi	r22, 0x24	; 36
    1b7c:	79 ed       	ldi	r23, 0xD9	; 217
    1b7e:	8b e5       	ldi	r24, 0x5B	; 91
    1b80:	97 e0       	ldi	r25, 0x07	; 7
    1b82:	2d e1       	ldi	r18, 0x1D	; 29
    1b84:	33 ef       	ldi	r19, 0xF3	; 243
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodsi4>
    1b8e:	49 01       	movw	r8, r18
    1b90:	5a 01       	movw	r10, r20
    1b92:	9b 01       	movw	r18, r22
    1b94:	ac 01       	movw	r20, r24
    1b96:	a7 ea       	ldi	r26, 0xA7	; 167
    1b98:	b1 e4       	ldi	r27, 0x41	; 65
    1b9a:	0e 94 8d 11 	call	0x231a	; 0x231a <__muluhisi3>
    1b9e:	6b 01       	movw	r12, r22
    1ba0:	7c 01       	movw	r14, r24
    1ba2:	ac ee       	ldi	r26, 0xEC	; 236
    1ba4:	b4 ef       	ldi	r27, 0xF4	; 244
    1ba6:	a5 01       	movw	r20, r10
    1ba8:	94 01       	movw	r18, r8
    1baa:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulohisi3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8c 0d       	add	r24, r12
    1bb4:	9d 1d       	adc	r25, r13
    1bb6:	ae 1d       	adc	r26, r14
    1bb8:	bf 1d       	adc	r27, r15
    1bba:	b7 ff       	sbrs	r27, 7
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <random_r+0x72>
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	a1 09       	sbc	r26, r1
    1bc2:	b0 48       	sbci	r27, 0x80	; 128
    1bc4:	88 83       	st	Y, r24
    1bc6:	99 83       	std	Y+1, r25	; 0x01
    1bc8:	aa 83       	std	Y+2, r26	; 0x02
    1bca:	bb 83       	std	Y+3, r27	; 0x03
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	9f 77       	andi	r25, 0x7F	; 127
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	08 95       	ret

00001be8 <random>:
    1be8:	8f 92       	push	r8
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1bfc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1c00:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1c04:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1c08:	61 15       	cp	r22, r1
    1c0a:	71 05       	cpc	r23, r1
    1c0c:	81 05       	cpc	r24, r1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <random+0x32>
    1c12:	64 e2       	ldi	r22, 0x24	; 36
    1c14:	79 ed       	ldi	r23, 0xD9	; 217
    1c16:	8b e5       	ldi	r24, 0x5B	; 91
    1c18:	97 e0       	ldi	r25, 0x07	; 7
    1c1a:	2d e1       	ldi	r18, 0x1D	; 29
    1c1c:	33 ef       	ldi	r19, 0xF3	; 243
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodsi4>
    1c26:	49 01       	movw	r8, r18
    1c28:	5a 01       	movw	r10, r20
    1c2a:	9b 01       	movw	r18, r22
    1c2c:	ac 01       	movw	r20, r24
    1c2e:	a7 ea       	ldi	r26, 0xA7	; 167
    1c30:	b1 e4       	ldi	r27, 0x41	; 65
    1c32:	0e 94 8d 11 	call	0x231a	; 0x231a <__muluhisi3>
    1c36:	6b 01       	movw	r12, r22
    1c38:	7c 01       	movw	r14, r24
    1c3a:	ac ee       	ldi	r26, 0xEC	; 236
    1c3c:	b4 ef       	ldi	r27, 0xF4	; 244
    1c3e:	a5 01       	movw	r20, r10
    1c40:	94 01       	movw	r18, r8
    1c42:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulohisi3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8c 0d       	add	r24, r12
    1c4c:	9d 1d       	adc	r25, r13
    1c4e:	ae 1d       	adc	r26, r14
    1c50:	bf 1d       	adc	r27, r15
    1c52:	b7 ff       	sbrs	r27, 7
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <random+0x74>
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	a1 09       	sbc	r26, r1
    1c5a:	b0 48       	sbci	r27, 0x80	; 128
    1c5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1c60:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1c64:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1c68:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	9f 77       	andi	r25, 0x7F	; 127
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	df 90       	pop	r13
    1c78:	cf 90       	pop	r12
    1c7a:	bf 90       	pop	r11
    1c7c:	af 90       	pop	r10
    1c7e:	9f 90       	pop	r9
    1c80:	8f 90       	pop	r8
    1c82:	08 95       	ret

00001c84 <srandom>:
    1c84:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1c88:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1c8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1c90:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1c94:	08 95       	ret

00001c96 <fgetc>:
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	20 ff       	sbrs	r18, 0
    1ca0:	33 c0       	rjmp	.+102    	; 0x1d08 <fgetc+0x72>
    1ca2:	26 ff       	sbrs	r18, 6
    1ca4:	0a c0       	rjmp	.+20     	; 0x1cba <fgetc+0x24>
    1ca6:	2f 7b       	andi	r18, 0xBF	; 191
    1ca8:	2b 83       	std	Y+3, r18	; 0x03
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	9f 81       	ldd	r25, Y+7	; 0x07
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	9f 83       	std	Y+7, r25	; 0x07
    1cb2:	8e 83       	std	Y+6, r24	; 0x06
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	29 c0       	rjmp	.+82     	; 0x1d0c <fgetc+0x76>
    1cba:	22 ff       	sbrs	r18, 2
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <fgetc+0x46>
    1cbe:	e8 81       	ld	r30, Y
    1cc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc2:	80 81       	ld	r24, Z
    1cc4:	08 2e       	mov	r0, r24
    1cc6:	00 0c       	add	r0, r0
    1cc8:	99 0b       	sbc	r25, r25
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	19 f4       	brne	.+6      	; 0x1cd4 <fgetc+0x3e>
    1cce:	20 62       	ori	r18, 0x20	; 32
    1cd0:	2b 83       	std	Y+3, r18	; 0x03
    1cd2:	1a c0       	rjmp	.+52     	; 0x1d08 <fgetc+0x72>
    1cd4:	31 96       	adiw	r30, 0x01	; 1
    1cd6:	f9 83       	std	Y+1, r31	; 0x01
    1cd8:	e8 83       	st	Y, r30
    1cda:	0e c0       	rjmp	.+28     	; 0x1cf8 <fgetc+0x62>
    1cdc:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cde:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ce0:	09 95       	icall
    1ce2:	97 ff       	sbrs	r25, 7
    1ce4:	09 c0       	rjmp	.+18     	; 0x1cf8 <fgetc+0x62>
    1ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <fgetc+0x5a>
    1cec:	80 e2       	ldi	r24, 0x20	; 32
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <fgetc+0x5c>
    1cf0:	80 e1       	ldi	r24, 0x10	; 16
    1cf2:	82 2b       	or	r24, r18
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	08 c0       	rjmp	.+16     	; 0x1d08 <fgetc+0x72>
    1cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1cfc:	2f 5f       	subi	r18, 0xFF	; 255
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	3f 83       	std	Y+7, r19	; 0x07
    1d02:	2e 83       	std	Y+6, r18	; 0x06
    1d04:	99 27       	eor	r25, r25
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <fgetc+0x76>
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	9f ef       	ldi	r25, 0xFF	; 255
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <printf>:
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e8       	ldi	r30, 0x8F	; 143
    1d18:	fe e0       	ldi	r31, 0x0E	; 14
    1d1a:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__prologue_saves__+0x20>
    1d1e:	ae 01       	movw	r20, r28
    1d20:	4b 5f       	subi	r20, 0xFB	; 251
    1d22:	5f 4f       	sbci	r21, 0xFF	; 255
    1d24:	fa 01       	movw	r30, r20
    1d26:	61 91       	ld	r22, Z+
    1d28:	71 91       	ld	r23, Z+
    1d2a:	af 01       	movw	r20, r30
    1d2c:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__iob+0x2>
    1d30:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__iob+0x3>
    1d34:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <vfprintf>
    1d38:	e2 e0       	ldi	r30, 0x02	; 2
    1d3a:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__epilogue_restores__+0x20>

00001d3e <printf_P>:
    1d3e:	a0 e0       	ldi	r26, 0x00	; 0
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e5 ea       	ldi	r30, 0xA5	; 165
    1d44:	fe e0       	ldi	r31, 0x0E	; 14
    1d46:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x1c>
    1d4a:	ae 01       	movw	r20, r28
    1d4c:	49 5f       	subi	r20, 0xF9	; 249
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	da 01       	movw	r26, r20
    1d52:	6d 91       	ld	r22, X+
    1d54:	7d 91       	ld	r23, X+
    1d56:	ad 01       	movw	r20, r26
    1d58:	02 eb       	ldi	r16, 0xB2	; 178
    1d5a:	12 e0       	ldi	r17, 0x02	; 2
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	dc 01       	movw	r26, r24
    1d64:	13 96       	adiw	r26, 0x03	; 3
    1d66:	2c 91       	ld	r18, X
    1d68:	13 97       	sbiw	r26, 0x03	; 3
    1d6a:	28 60       	ori	r18, 0x08	; 8
    1d6c:	13 96       	adiw	r26, 0x03	; 3
    1d6e:	2c 93       	st	X, r18
    1d70:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <vfprintf>
    1d74:	d8 01       	movw	r26, r16
    1d76:	12 96       	adiw	r26, 0x02	; 2
    1d78:	ed 91       	ld	r30, X+
    1d7a:	fc 91       	ld	r31, X
    1d7c:	13 97       	sbiw	r26, 0x03	; 3
    1d7e:	23 81       	ldd	r18, Z+3	; 0x03
    1d80:	27 7f       	andi	r18, 0xF7	; 247
    1d82:	23 83       	std	Z+3, r18	; 0x03
    1d84:	e4 e0       	ldi	r30, 0x04	; 4
    1d86:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x1c>

00001d8a <putchar>:
    1d8a:	60 91 b4 02 	lds	r22, 0x02B4	; 0x8002b4 <__iob+0x2>
    1d8e:	70 91 b5 02 	lds	r23, 0x02B5	; 0x8002b5 <__iob+0x3>
    1d92:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    1d96:	08 95       	ret

00001d98 <puts>:
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <__iob+0x2>
    1da4:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <__iob+0x3>
    1da8:	23 81       	ldd	r18, Z+3	; 0x03
    1daa:	21 ff       	sbrs	r18, 1
    1dac:	1b c0       	rjmp	.+54     	; 0x1de4 <puts+0x4c>
    1dae:	8c 01       	movw	r16, r24
    1db0:	d0 e0       	ldi	r29, 0x00	; 0
    1db2:	c0 e0       	ldi	r28, 0x00	; 0
    1db4:	f8 01       	movw	r30, r16
    1db6:	81 91       	ld	r24, Z+
    1db8:	8f 01       	movw	r16, r30
    1dba:	60 91 b4 02 	lds	r22, 0x02B4	; 0x8002b4 <__iob+0x2>
    1dbe:	70 91 b5 02 	lds	r23, 0x02B5	; 0x8002b5 <__iob+0x3>
    1dc2:	db 01       	movw	r26, r22
    1dc4:	18 96       	adiw	r26, 0x08	; 8
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	19 97       	sbiw	r26, 0x09	; 9
    1dcc:	88 23       	and	r24, r24
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <puts+0x44>
    1dd0:	09 95       	icall
    1dd2:	89 2b       	or	r24, r25
    1dd4:	79 f3       	breq	.-34     	; 0x1db4 <puts+0x1c>
    1dd6:	df ef       	ldi	r29, 0xFF	; 255
    1dd8:	cf ef       	ldi	r28, 0xFF	; 255
    1dda:	ec cf       	rjmp	.-40     	; 0x1db4 <puts+0x1c>
    1ddc:	8a e0       	ldi	r24, 0x0A	; 10
    1dde:	09 95       	icall
    1de0:	89 2b       	or	r24, r25
    1de2:	19 f0       	breq	.+6      	; 0x1dea <puts+0x52>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	9f ef       	ldi	r25, 0xFF	; 255
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <puts+0x56>
    1dea:	8d 2f       	mov	r24, r29
    1dec:	9c 2f       	mov	r25, r28
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <vfprintf>:
    1df8:	ab e0       	ldi	r26, 0x0B	; 11
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e2 e0       	ldi	r30, 0x02	; 2
    1dfe:	ff e0       	ldi	r31, 0x0F	; 15
    1e00:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__>
    1e04:	6c 01       	movw	r12, r24
    1e06:	7b 01       	movw	r14, r22
    1e08:	8a 01       	movw	r16, r20
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	17 82       	std	Z+7, r1	; 0x07
    1e0e:	16 82       	std	Z+6, r1	; 0x06
    1e10:	83 81       	ldd	r24, Z+3	; 0x03
    1e12:	81 ff       	sbrs	r24, 1
    1e14:	cc c1       	rjmp	.+920    	; 0x21ae <vfprintf+0x3b6>
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	3c 01       	movw	r6, r24
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	f7 01       	movw	r30, r14
    1e22:	93 fd       	sbrc	r25, 3
    1e24:	85 91       	lpm	r24, Z+
    1e26:	93 ff       	sbrs	r25, 3
    1e28:	81 91       	ld	r24, Z+
    1e2a:	7f 01       	movw	r14, r30
    1e2c:	88 23       	and	r24, r24
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <vfprintf+0x3a>
    1e30:	ba c1       	rjmp	.+884    	; 0x21a6 <vfprintf+0x3ae>
    1e32:	85 32       	cpi	r24, 0x25	; 37
    1e34:	39 f4       	brne	.+14     	; 0x1e44 <vfprintf+0x4c>
    1e36:	93 fd       	sbrc	r25, 3
    1e38:	85 91       	lpm	r24, Z+
    1e3a:	93 ff       	sbrs	r25, 3
    1e3c:	81 91       	ld	r24, Z+
    1e3e:	7f 01       	movw	r14, r30
    1e40:	85 32       	cpi	r24, 0x25	; 37
    1e42:	29 f4       	brne	.+10     	; 0x1e4e <vfprintf+0x56>
    1e44:	b6 01       	movw	r22, r12
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    1e4c:	e7 cf       	rjmp	.-50     	; 0x1e1c <vfprintf+0x24>
    1e4e:	91 2c       	mov	r9, r1
    1e50:	21 2c       	mov	r2, r1
    1e52:	31 2c       	mov	r3, r1
    1e54:	ff e1       	ldi	r31, 0x1F	; 31
    1e56:	f3 15       	cp	r31, r3
    1e58:	d8 f0       	brcs	.+54     	; 0x1e90 <vfprintf+0x98>
    1e5a:	8b 32       	cpi	r24, 0x2B	; 43
    1e5c:	79 f0       	breq	.+30     	; 0x1e7c <vfprintf+0x84>
    1e5e:	38 f4       	brcc	.+14     	; 0x1e6e <vfprintf+0x76>
    1e60:	80 32       	cpi	r24, 0x20	; 32
    1e62:	79 f0       	breq	.+30     	; 0x1e82 <vfprintf+0x8a>
    1e64:	83 32       	cpi	r24, 0x23	; 35
    1e66:	a1 f4       	brne	.+40     	; 0x1e90 <vfprintf+0x98>
    1e68:	23 2d       	mov	r18, r3
    1e6a:	20 61       	ori	r18, 0x10	; 16
    1e6c:	1d c0       	rjmp	.+58     	; 0x1ea8 <vfprintf+0xb0>
    1e6e:	8d 32       	cpi	r24, 0x2D	; 45
    1e70:	61 f0       	breq	.+24     	; 0x1e8a <vfprintf+0x92>
    1e72:	80 33       	cpi	r24, 0x30	; 48
    1e74:	69 f4       	brne	.+26     	; 0x1e90 <vfprintf+0x98>
    1e76:	23 2d       	mov	r18, r3
    1e78:	21 60       	ori	r18, 0x01	; 1
    1e7a:	16 c0       	rjmp	.+44     	; 0x1ea8 <vfprintf+0xb0>
    1e7c:	83 2d       	mov	r24, r3
    1e7e:	82 60       	ori	r24, 0x02	; 2
    1e80:	38 2e       	mov	r3, r24
    1e82:	e3 2d       	mov	r30, r3
    1e84:	e4 60       	ori	r30, 0x04	; 4
    1e86:	3e 2e       	mov	r3, r30
    1e88:	2a c0       	rjmp	.+84     	; 0x1ede <vfprintf+0xe6>
    1e8a:	f3 2d       	mov	r31, r3
    1e8c:	f8 60       	ori	r31, 0x08	; 8
    1e8e:	1d c0       	rjmp	.+58     	; 0x1eca <vfprintf+0xd2>
    1e90:	37 fc       	sbrc	r3, 7
    1e92:	2d c0       	rjmp	.+90     	; 0x1eee <vfprintf+0xf6>
    1e94:	20 ed       	ldi	r18, 0xD0	; 208
    1e96:	28 0f       	add	r18, r24
    1e98:	2a 30       	cpi	r18, 0x0A	; 10
    1e9a:	40 f0       	brcs	.+16     	; 0x1eac <vfprintf+0xb4>
    1e9c:	8e 32       	cpi	r24, 0x2E	; 46
    1e9e:	b9 f4       	brne	.+46     	; 0x1ece <vfprintf+0xd6>
    1ea0:	36 fc       	sbrc	r3, 6
    1ea2:	81 c1       	rjmp	.+770    	; 0x21a6 <vfprintf+0x3ae>
    1ea4:	23 2d       	mov	r18, r3
    1ea6:	20 64       	ori	r18, 0x40	; 64
    1ea8:	32 2e       	mov	r3, r18
    1eaa:	19 c0       	rjmp	.+50     	; 0x1ede <vfprintf+0xe6>
    1eac:	36 fe       	sbrs	r3, 6
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <vfprintf+0xc4>
    1eb0:	8a e0       	ldi	r24, 0x0A	; 10
    1eb2:	98 9e       	mul	r9, r24
    1eb4:	20 0d       	add	r18, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	92 2e       	mov	r9, r18
    1eba:	11 c0       	rjmp	.+34     	; 0x1ede <vfprintf+0xe6>
    1ebc:	ea e0       	ldi	r30, 0x0A	; 10
    1ebe:	2e 9e       	mul	r2, r30
    1ec0:	20 0d       	add	r18, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	22 2e       	mov	r2, r18
    1ec6:	f3 2d       	mov	r31, r3
    1ec8:	f0 62       	ori	r31, 0x20	; 32
    1eca:	3f 2e       	mov	r3, r31
    1ecc:	08 c0       	rjmp	.+16     	; 0x1ede <vfprintf+0xe6>
    1ece:	8c 36       	cpi	r24, 0x6C	; 108
    1ed0:	21 f4       	brne	.+8      	; 0x1eda <vfprintf+0xe2>
    1ed2:	83 2d       	mov	r24, r3
    1ed4:	80 68       	ori	r24, 0x80	; 128
    1ed6:	38 2e       	mov	r3, r24
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <vfprintf+0xe6>
    1eda:	88 36       	cpi	r24, 0x68	; 104
    1edc:	41 f4       	brne	.+16     	; 0x1eee <vfprintf+0xf6>
    1ede:	f7 01       	movw	r30, r14
    1ee0:	93 fd       	sbrc	r25, 3
    1ee2:	85 91       	lpm	r24, Z+
    1ee4:	93 ff       	sbrs	r25, 3
    1ee6:	81 91       	ld	r24, Z+
    1ee8:	7f 01       	movw	r14, r30
    1eea:	81 11       	cpse	r24, r1
    1eec:	b3 cf       	rjmp	.-154    	; 0x1e54 <vfprintf+0x5c>
    1eee:	98 2f       	mov	r25, r24
    1ef0:	9f 7d       	andi	r25, 0xDF	; 223
    1ef2:	95 54       	subi	r25, 0x45	; 69
    1ef4:	93 30       	cpi	r25, 0x03	; 3
    1ef6:	28 f4       	brcc	.+10     	; 0x1f02 <vfprintf+0x10a>
    1ef8:	0c 5f       	subi	r16, 0xFC	; 252
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	9f e3       	ldi	r25, 0x3F	; 63
    1efe:	99 83       	std	Y+1, r25	; 0x01
    1f00:	0d c0       	rjmp	.+26     	; 0x1f1c <vfprintf+0x124>
    1f02:	83 36       	cpi	r24, 0x63	; 99
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <vfprintf+0x11a>
    1f06:	83 37       	cpi	r24, 0x73	; 115
    1f08:	71 f0       	breq	.+28     	; 0x1f26 <vfprintf+0x12e>
    1f0a:	83 35       	cpi	r24, 0x53	; 83
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <vfprintf+0x118>
    1f0e:	59 c0       	rjmp	.+178    	; 0x1fc2 <vfprintf+0x1ca>
    1f10:	21 c0       	rjmp	.+66     	; 0x1f54 <vfprintf+0x15c>
    1f12:	f8 01       	movw	r30, r16
    1f14:	80 81       	ld	r24, Z
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	0e 5f       	subi	r16, 0xFE	; 254
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	88 24       	eor	r8, r8
    1f1e:	83 94       	inc	r8
    1f20:	91 2c       	mov	r9, r1
    1f22:	53 01       	movw	r10, r6
    1f24:	13 c0       	rjmp	.+38     	; 0x1f4c <vfprintf+0x154>
    1f26:	28 01       	movw	r4, r16
    1f28:	f2 e0       	ldi	r31, 0x02	; 2
    1f2a:	4f 0e       	add	r4, r31
    1f2c:	51 1c       	adc	r5, r1
    1f2e:	f8 01       	movw	r30, r16
    1f30:	a0 80       	ld	r10, Z
    1f32:	b1 80       	ldd	r11, Z+1	; 0x01
    1f34:	36 fe       	sbrs	r3, 6
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <vfprintf+0x146>
    1f38:	69 2d       	mov	r22, r9
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <vfprintf+0x14a>
    1f3e:	6f ef       	ldi	r22, 0xFF	; 255
    1f40:	7f ef       	ldi	r23, 0xFF	; 255
    1f42:	c5 01       	movw	r24, r10
    1f44:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <strnlen>
    1f48:	4c 01       	movw	r8, r24
    1f4a:	82 01       	movw	r16, r4
    1f4c:	f3 2d       	mov	r31, r3
    1f4e:	ff 77       	andi	r31, 0x7F	; 127
    1f50:	3f 2e       	mov	r3, r31
    1f52:	16 c0       	rjmp	.+44     	; 0x1f80 <vfprintf+0x188>
    1f54:	28 01       	movw	r4, r16
    1f56:	22 e0       	ldi	r18, 0x02	; 2
    1f58:	42 0e       	add	r4, r18
    1f5a:	51 1c       	adc	r5, r1
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	a0 80       	ld	r10, Z
    1f60:	b1 80       	ldd	r11, Z+1	; 0x01
    1f62:	36 fe       	sbrs	r3, 6
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <vfprintf+0x174>
    1f66:	69 2d       	mov	r22, r9
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <vfprintf+0x178>
    1f6c:	6f ef       	ldi	r22, 0xFF	; 255
    1f6e:	7f ef       	ldi	r23, 0xFF	; 255
    1f70:	c5 01       	movw	r24, r10
    1f72:	0e 94 dd 10 	call	0x21ba	; 0x21ba <strnlen_P>
    1f76:	4c 01       	movw	r8, r24
    1f78:	f3 2d       	mov	r31, r3
    1f7a:	f0 68       	ori	r31, 0x80	; 128
    1f7c:	3f 2e       	mov	r3, r31
    1f7e:	82 01       	movw	r16, r4
    1f80:	33 fc       	sbrc	r3, 3
    1f82:	1b c0       	rjmp	.+54     	; 0x1fba <vfprintf+0x1c2>
    1f84:	82 2d       	mov	r24, r2
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	88 16       	cp	r8, r24
    1f8a:	99 06       	cpc	r9, r25
    1f8c:	b0 f4       	brcc	.+44     	; 0x1fba <vfprintf+0x1c2>
    1f8e:	b6 01       	movw	r22, r12
    1f90:	80 e2       	ldi	r24, 0x20	; 32
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    1f98:	2a 94       	dec	r2
    1f9a:	f4 cf       	rjmp	.-24     	; 0x1f84 <vfprintf+0x18c>
    1f9c:	f5 01       	movw	r30, r10
    1f9e:	37 fc       	sbrc	r3, 7
    1fa0:	85 91       	lpm	r24, Z+
    1fa2:	37 fe       	sbrs	r3, 7
    1fa4:	81 91       	ld	r24, Z+
    1fa6:	5f 01       	movw	r10, r30
    1fa8:	b6 01       	movw	r22, r12
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    1fb0:	21 10       	cpse	r2, r1
    1fb2:	2a 94       	dec	r2
    1fb4:	21 e0       	ldi	r18, 0x01	; 1
    1fb6:	82 1a       	sub	r8, r18
    1fb8:	91 08       	sbc	r9, r1
    1fba:	81 14       	cp	r8, r1
    1fbc:	91 04       	cpc	r9, r1
    1fbe:	71 f7       	brne	.-36     	; 0x1f9c <vfprintf+0x1a4>
    1fc0:	e8 c0       	rjmp	.+464    	; 0x2192 <vfprintf+0x39a>
    1fc2:	84 36       	cpi	r24, 0x64	; 100
    1fc4:	11 f0       	breq	.+4      	; 0x1fca <vfprintf+0x1d2>
    1fc6:	89 36       	cpi	r24, 0x69	; 105
    1fc8:	41 f5       	brne	.+80     	; 0x201a <vfprintf+0x222>
    1fca:	f8 01       	movw	r30, r16
    1fcc:	37 fe       	sbrs	r3, 7
    1fce:	07 c0       	rjmp	.+14     	; 0x1fde <vfprintf+0x1e6>
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	0c 5f       	subi	r16, 0xFC	; 252
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <vfprintf+0x1f6>
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	07 2e       	mov	r0, r23
    1fe4:	00 0c       	add	r0, r0
    1fe6:	88 0b       	sbc	r24, r24
    1fe8:	99 0b       	sbc	r25, r25
    1fea:	0e 5f       	subi	r16, 0xFE	; 254
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	f3 2d       	mov	r31, r3
    1ff0:	ff 76       	andi	r31, 0x6F	; 111
    1ff2:	3f 2e       	mov	r3, r31
    1ff4:	97 ff       	sbrs	r25, 7
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <vfprintf+0x212>
    1ff8:	90 95       	com	r25
    1ffa:	80 95       	com	r24
    1ffc:	70 95       	com	r23
    1ffe:	61 95       	neg	r22
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	f0 68       	ori	r31, 0x80	; 128
    2008:	3f 2e       	mov	r3, r31
    200a:	2a e0       	ldi	r18, 0x0A	; 10
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	a3 01       	movw	r20, r6
    2010:	0e 94 2f 11 	call	0x225e	; 0x225e <__ultoa_invert>
    2014:	88 2e       	mov	r8, r24
    2016:	86 18       	sub	r8, r6
    2018:	45 c0       	rjmp	.+138    	; 0x20a4 <vfprintf+0x2ac>
    201a:	85 37       	cpi	r24, 0x75	; 117
    201c:	31 f4       	brne	.+12     	; 0x202a <vfprintf+0x232>
    201e:	23 2d       	mov	r18, r3
    2020:	2f 7e       	andi	r18, 0xEF	; 239
    2022:	b2 2e       	mov	r11, r18
    2024:	2a e0       	ldi	r18, 0x0A	; 10
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	25 c0       	rjmp	.+74     	; 0x2074 <vfprintf+0x27c>
    202a:	93 2d       	mov	r25, r3
    202c:	99 7f       	andi	r25, 0xF9	; 249
    202e:	b9 2e       	mov	r11, r25
    2030:	8f 36       	cpi	r24, 0x6F	; 111
    2032:	c1 f0       	breq	.+48     	; 0x2064 <vfprintf+0x26c>
    2034:	18 f4       	brcc	.+6      	; 0x203c <vfprintf+0x244>
    2036:	88 35       	cpi	r24, 0x58	; 88
    2038:	79 f0       	breq	.+30     	; 0x2058 <vfprintf+0x260>
    203a:	b5 c0       	rjmp	.+362    	; 0x21a6 <vfprintf+0x3ae>
    203c:	80 37       	cpi	r24, 0x70	; 112
    203e:	19 f0       	breq	.+6      	; 0x2046 <vfprintf+0x24e>
    2040:	88 37       	cpi	r24, 0x78	; 120
    2042:	21 f0       	breq	.+8      	; 0x204c <vfprintf+0x254>
    2044:	b0 c0       	rjmp	.+352    	; 0x21a6 <vfprintf+0x3ae>
    2046:	e9 2f       	mov	r30, r25
    2048:	e0 61       	ori	r30, 0x10	; 16
    204a:	be 2e       	mov	r11, r30
    204c:	b4 fe       	sbrs	r11, 4
    204e:	0d c0       	rjmp	.+26     	; 0x206a <vfprintf+0x272>
    2050:	fb 2d       	mov	r31, r11
    2052:	f4 60       	ori	r31, 0x04	; 4
    2054:	bf 2e       	mov	r11, r31
    2056:	09 c0       	rjmp	.+18     	; 0x206a <vfprintf+0x272>
    2058:	34 fe       	sbrs	r3, 4
    205a:	0a c0       	rjmp	.+20     	; 0x2070 <vfprintf+0x278>
    205c:	29 2f       	mov	r18, r25
    205e:	26 60       	ori	r18, 0x06	; 6
    2060:	b2 2e       	mov	r11, r18
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <vfprintf+0x278>
    2064:	28 e0       	ldi	r18, 0x08	; 8
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <vfprintf+0x27c>
    206a:	20 e1       	ldi	r18, 0x10	; 16
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <vfprintf+0x27c>
    2070:	20 e1       	ldi	r18, 0x10	; 16
    2072:	32 e0       	ldi	r19, 0x02	; 2
    2074:	f8 01       	movw	r30, r16
    2076:	b7 fe       	sbrs	r11, 7
    2078:	07 c0       	rjmp	.+14     	; 0x2088 <vfprintf+0x290>
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	0c 5f       	subi	r16, 0xFC	; 252
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	06 c0       	rjmp	.+12     	; 0x2094 <vfprintf+0x29c>
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 5f       	subi	r16, 0xFE	; 254
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	a3 01       	movw	r20, r6
    2096:	0e 94 2f 11 	call	0x225e	; 0x225e <__ultoa_invert>
    209a:	88 2e       	mov	r8, r24
    209c:	86 18       	sub	r8, r6
    209e:	fb 2d       	mov	r31, r11
    20a0:	ff 77       	andi	r31, 0x7F	; 127
    20a2:	3f 2e       	mov	r3, r31
    20a4:	36 fe       	sbrs	r3, 6
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <vfprintf+0x2ca>
    20a8:	23 2d       	mov	r18, r3
    20aa:	2e 7f       	andi	r18, 0xFE	; 254
    20ac:	a2 2e       	mov	r10, r18
    20ae:	89 14       	cp	r8, r9
    20b0:	58 f4       	brcc	.+22     	; 0x20c8 <vfprintf+0x2d0>
    20b2:	34 fe       	sbrs	r3, 4
    20b4:	0b c0       	rjmp	.+22     	; 0x20cc <vfprintf+0x2d4>
    20b6:	32 fc       	sbrc	r3, 2
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <vfprintf+0x2d4>
    20ba:	83 2d       	mov	r24, r3
    20bc:	8e 7e       	andi	r24, 0xEE	; 238
    20be:	a8 2e       	mov	r10, r24
    20c0:	05 c0       	rjmp	.+10     	; 0x20cc <vfprintf+0x2d4>
    20c2:	b8 2c       	mov	r11, r8
    20c4:	a3 2c       	mov	r10, r3
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <vfprintf+0x2d6>
    20c8:	b8 2c       	mov	r11, r8
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <vfprintf+0x2d6>
    20cc:	b9 2c       	mov	r11, r9
    20ce:	a4 fe       	sbrs	r10, 4
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <vfprintf+0x2f8>
    20d2:	fe 01       	movw	r30, r28
    20d4:	e8 0d       	add	r30, r8
    20d6:	f1 1d       	adc	r31, r1
    20d8:	80 81       	ld	r24, Z
    20da:	80 33       	cpi	r24, 0x30	; 48
    20dc:	21 f4       	brne	.+8      	; 0x20e6 <vfprintf+0x2ee>
    20de:	9a 2d       	mov	r25, r10
    20e0:	99 7e       	andi	r25, 0xE9	; 233
    20e2:	a9 2e       	mov	r10, r25
    20e4:	09 c0       	rjmp	.+18     	; 0x20f8 <vfprintf+0x300>
    20e6:	a2 fe       	sbrs	r10, 2
    20e8:	06 c0       	rjmp	.+12     	; 0x20f6 <vfprintf+0x2fe>
    20ea:	b3 94       	inc	r11
    20ec:	b3 94       	inc	r11
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <vfprintf+0x300>
    20f0:	8a 2d       	mov	r24, r10
    20f2:	86 78       	andi	r24, 0x86	; 134
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <vfprintf+0x300>
    20f6:	b3 94       	inc	r11
    20f8:	a3 fc       	sbrc	r10, 3
    20fa:	11 c0       	rjmp	.+34     	; 0x211e <vfprintf+0x326>
    20fc:	a0 fe       	sbrs	r10, 0
    20fe:	06 c0       	rjmp	.+12     	; 0x210c <vfprintf+0x314>
    2100:	b2 14       	cp	r11, r2
    2102:	88 f4       	brcc	.+34     	; 0x2126 <vfprintf+0x32e>
    2104:	28 0c       	add	r2, r8
    2106:	92 2c       	mov	r9, r2
    2108:	9b 18       	sub	r9, r11
    210a:	0e c0       	rjmp	.+28     	; 0x2128 <vfprintf+0x330>
    210c:	b2 14       	cp	r11, r2
    210e:	60 f4       	brcc	.+24     	; 0x2128 <vfprintf+0x330>
    2110:	b6 01       	movw	r22, r12
    2112:	80 e2       	ldi	r24, 0x20	; 32
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    211a:	b3 94       	inc	r11
    211c:	f7 cf       	rjmp	.-18     	; 0x210c <vfprintf+0x314>
    211e:	b2 14       	cp	r11, r2
    2120:	18 f4       	brcc	.+6      	; 0x2128 <vfprintf+0x330>
    2122:	2b 18       	sub	r2, r11
    2124:	02 c0       	rjmp	.+4      	; 0x212a <vfprintf+0x332>
    2126:	98 2c       	mov	r9, r8
    2128:	21 2c       	mov	r2, r1
    212a:	a4 fe       	sbrs	r10, 4
    212c:	10 c0       	rjmp	.+32     	; 0x214e <vfprintf+0x356>
    212e:	b6 01       	movw	r22, r12
    2130:	80 e3       	ldi	r24, 0x30	; 48
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    2138:	a2 fe       	sbrs	r10, 2
    213a:	17 c0       	rjmp	.+46     	; 0x216a <vfprintf+0x372>
    213c:	a1 fc       	sbrc	r10, 1
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <vfprintf+0x34e>
    2140:	88 e7       	ldi	r24, 0x78	; 120
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <vfprintf+0x352>
    2146:	88 e5       	ldi	r24, 0x58	; 88
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	b6 01       	movw	r22, r12
    214c:	0c c0       	rjmp	.+24     	; 0x2166 <vfprintf+0x36e>
    214e:	8a 2d       	mov	r24, r10
    2150:	86 78       	andi	r24, 0x86	; 134
    2152:	59 f0       	breq	.+22     	; 0x216a <vfprintf+0x372>
    2154:	a1 fe       	sbrs	r10, 1
    2156:	02 c0       	rjmp	.+4      	; 0x215c <vfprintf+0x364>
    2158:	8b e2       	ldi	r24, 0x2B	; 43
    215a:	01 c0       	rjmp	.+2      	; 0x215e <vfprintf+0x366>
    215c:	80 e2       	ldi	r24, 0x20	; 32
    215e:	a7 fc       	sbrc	r10, 7
    2160:	8d e2       	ldi	r24, 0x2D	; 45
    2162:	b6 01       	movw	r22, r12
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    216a:	89 14       	cp	r8, r9
    216c:	38 f4       	brcc	.+14     	; 0x217c <vfprintf+0x384>
    216e:	b6 01       	movw	r22, r12
    2170:	80 e3       	ldi	r24, 0x30	; 48
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    2178:	9a 94       	dec	r9
    217a:	f7 cf       	rjmp	.-18     	; 0x216a <vfprintf+0x372>
    217c:	8a 94       	dec	r8
    217e:	f3 01       	movw	r30, r6
    2180:	e8 0d       	add	r30, r8
    2182:	f1 1d       	adc	r31, r1
    2184:	80 81       	ld	r24, Z
    2186:	b6 01       	movw	r22, r12
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    218e:	81 10       	cpse	r8, r1
    2190:	f5 cf       	rjmp	.-22     	; 0x217c <vfprintf+0x384>
    2192:	22 20       	and	r2, r2
    2194:	09 f4       	brne	.+2      	; 0x2198 <vfprintf+0x3a0>
    2196:	42 ce       	rjmp	.-892    	; 0x1e1c <vfprintf+0x24>
    2198:	b6 01       	movw	r22, r12
    219a:	80 e2       	ldi	r24, 0x20	; 32
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <fputc>
    21a2:	2a 94       	dec	r2
    21a4:	f6 cf       	rjmp	.-20     	; 0x2192 <vfprintf+0x39a>
    21a6:	f6 01       	movw	r30, r12
    21a8:	86 81       	ldd	r24, Z+6	; 0x06
    21aa:	97 81       	ldd	r25, Z+7	; 0x07
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <vfprintf+0x3ba>
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	9f ef       	ldi	r25, 0xFF	; 255
    21b2:	2b 96       	adiw	r28, 0x0b	; 11
    21b4:	e2 e1       	ldi	r30, 0x12	; 18
    21b6:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__>

000021ba <strnlen_P>:
    21ba:	fc 01       	movw	r30, r24
    21bc:	05 90       	lpm	r0, Z+
    21be:	61 50       	subi	r22, 0x01	; 1
    21c0:	70 40       	sbci	r23, 0x00	; 0
    21c2:	01 10       	cpse	r0, r1
    21c4:	d8 f7       	brcc	.-10     	; 0x21bc <strnlen_P+0x2>
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	8e 0f       	add	r24, r30
    21cc:	9f 1f       	adc	r25, r31
    21ce:	08 95       	ret

000021d0 <strnlen>:
    21d0:	fc 01       	movw	r30, r24
    21d2:	61 50       	subi	r22, 0x01	; 1
    21d4:	70 40       	sbci	r23, 0x00	; 0
    21d6:	01 90       	ld	r0, Z+
    21d8:	01 10       	cpse	r0, r1
    21da:	d8 f7       	brcc	.-10     	; 0x21d2 <strnlen+0x2>
    21dc:	80 95       	com	r24
    21de:	90 95       	com	r25
    21e0:	8e 0f       	add	r24, r30
    21e2:	9f 1f       	adc	r25, r31
    21e4:	08 95       	ret

000021e6 <fputc>:
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	fb 01       	movw	r30, r22
    21f0:	23 81       	ldd	r18, Z+3	; 0x03
    21f2:	21 fd       	sbrc	r18, 1
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <fputc+0x16>
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	2c c0       	rjmp	.+88     	; 0x2254 <fputc+0x6e>
    21fc:	22 ff       	sbrs	r18, 2
    21fe:	16 c0       	rjmp	.+44     	; 0x222c <fputc+0x46>
    2200:	46 81       	ldd	r20, Z+6	; 0x06
    2202:	57 81       	ldd	r21, Z+7	; 0x07
    2204:	24 81       	ldd	r18, Z+4	; 0x04
    2206:	35 81       	ldd	r19, Z+5	; 0x05
    2208:	42 17       	cp	r20, r18
    220a:	53 07       	cpc	r21, r19
    220c:	44 f4       	brge	.+16     	; 0x221e <fputc+0x38>
    220e:	a0 81       	ld	r26, Z
    2210:	b1 81       	ldd	r27, Z+1	; 0x01
    2212:	9d 01       	movw	r18, r26
    2214:	2f 5f       	subi	r18, 0xFF	; 255
    2216:	3f 4f       	sbci	r19, 0xFF	; 255
    2218:	31 83       	std	Z+1, r19	; 0x01
    221a:	20 83       	st	Z, r18
    221c:	8c 93       	st	X, r24
    221e:	26 81       	ldd	r18, Z+6	; 0x06
    2220:	37 81       	ldd	r19, Z+7	; 0x07
    2222:	2f 5f       	subi	r18, 0xFF	; 255
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
    2226:	37 83       	std	Z+7, r19	; 0x07
    2228:	26 83       	std	Z+6, r18	; 0x06
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <fputc+0x6e>
    222c:	8b 01       	movw	r16, r22
    222e:	ec 01       	movw	r28, r24
    2230:	fb 01       	movw	r30, r22
    2232:	00 84       	ldd	r0, Z+8	; 0x08
    2234:	f1 85       	ldd	r31, Z+9	; 0x09
    2236:	e0 2d       	mov	r30, r0
    2238:	09 95       	icall
    223a:	89 2b       	or	r24, r25
    223c:	e1 f6       	brne	.-72     	; 0x21f6 <fputc+0x10>
    223e:	d8 01       	movw	r26, r16
    2240:	16 96       	adiw	r26, 0x06	; 6
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	17 97       	sbiw	r26, 0x07	; 7
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	17 96       	adiw	r26, 0x07	; 7
    224c:	9c 93       	st	X, r25
    224e:	8e 93       	st	-X, r24
    2250:	16 97       	sbiw	r26, 0x06	; 6
    2252:	ce 01       	movw	r24, r28
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <__ultoa_invert>:
    225e:	fa 01       	movw	r30, r20
    2260:	aa 27       	eor	r26, r26
    2262:	28 30       	cpi	r18, 0x08	; 8
    2264:	51 f1       	breq	.+84     	; 0x22ba <__ultoa_invert+0x5c>
    2266:	20 31       	cpi	r18, 0x10	; 16
    2268:	81 f1       	breq	.+96     	; 0x22ca <__ultoa_invert+0x6c>
    226a:	e8 94       	clt
    226c:	6f 93       	push	r22
    226e:	6e 7f       	andi	r22, 0xFE	; 254
    2270:	6e 5f       	subi	r22, 0xFE	; 254
    2272:	7f 4f       	sbci	r23, 0xFF	; 255
    2274:	8f 4f       	sbci	r24, 0xFF	; 255
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	af 4f       	sbci	r26, 0xFF	; 255
    227a:	b1 e0       	ldi	r27, 0x01	; 1
    227c:	3e d0       	rcall	.+124    	; 0x22fa <__ultoa_invert+0x9c>
    227e:	b4 e0       	ldi	r27, 0x04	; 4
    2280:	3c d0       	rcall	.+120    	; 0x22fa <__ultoa_invert+0x9c>
    2282:	67 0f       	add	r22, r23
    2284:	78 1f       	adc	r23, r24
    2286:	89 1f       	adc	r24, r25
    2288:	9a 1f       	adc	r25, r26
    228a:	a1 1d       	adc	r26, r1
    228c:	68 0f       	add	r22, r24
    228e:	79 1f       	adc	r23, r25
    2290:	8a 1f       	adc	r24, r26
    2292:	91 1d       	adc	r25, r1
    2294:	a1 1d       	adc	r26, r1
    2296:	6a 0f       	add	r22, r26
    2298:	71 1d       	adc	r23, r1
    229a:	81 1d       	adc	r24, r1
    229c:	91 1d       	adc	r25, r1
    229e:	a1 1d       	adc	r26, r1
    22a0:	20 d0       	rcall	.+64     	; 0x22e2 <__ultoa_invert+0x84>
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <__ultoa_invert+0x48>
    22a4:	68 94       	set
    22a6:	3f 91       	pop	r19
    22a8:	2a e0       	ldi	r18, 0x0A	; 10
    22aa:	26 9f       	mul	r18, r22
    22ac:	11 24       	eor	r1, r1
    22ae:	30 19       	sub	r19, r0
    22b0:	30 5d       	subi	r19, 0xD0	; 208
    22b2:	31 93       	st	Z+, r19
    22b4:	de f6       	brtc	.-74     	; 0x226c <__ultoa_invert+0xe>
    22b6:	cf 01       	movw	r24, r30
    22b8:	08 95       	ret
    22ba:	46 2f       	mov	r20, r22
    22bc:	47 70       	andi	r20, 0x07	; 7
    22be:	40 5d       	subi	r20, 0xD0	; 208
    22c0:	41 93       	st	Z+, r20
    22c2:	b3 e0       	ldi	r27, 0x03	; 3
    22c4:	0f d0       	rcall	.+30     	; 0x22e4 <__ultoa_invert+0x86>
    22c6:	c9 f7       	brne	.-14     	; 0x22ba <__ultoa_invert+0x5c>
    22c8:	f6 cf       	rjmp	.-20     	; 0x22b6 <__ultoa_invert+0x58>
    22ca:	46 2f       	mov	r20, r22
    22cc:	4f 70       	andi	r20, 0x0F	; 15
    22ce:	40 5d       	subi	r20, 0xD0	; 208
    22d0:	4a 33       	cpi	r20, 0x3A	; 58
    22d2:	18 f0       	brcs	.+6      	; 0x22da <__ultoa_invert+0x7c>
    22d4:	49 5d       	subi	r20, 0xD9	; 217
    22d6:	31 fd       	sbrc	r19, 1
    22d8:	40 52       	subi	r20, 0x20	; 32
    22da:	41 93       	st	Z+, r20
    22dc:	02 d0       	rcall	.+4      	; 0x22e2 <__ultoa_invert+0x84>
    22de:	a9 f7       	brne	.-22     	; 0x22ca <__ultoa_invert+0x6c>
    22e0:	ea cf       	rjmp	.-44     	; 0x22b6 <__ultoa_invert+0x58>
    22e2:	b4 e0       	ldi	r27, 0x04	; 4
    22e4:	a6 95       	lsr	r26
    22e6:	97 95       	ror	r25
    22e8:	87 95       	ror	r24
    22ea:	77 95       	ror	r23
    22ec:	67 95       	ror	r22
    22ee:	ba 95       	dec	r27
    22f0:	c9 f7       	brne	.-14     	; 0x22e4 <__ultoa_invert+0x86>
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	61 05       	cpc	r22, r1
    22f6:	71 05       	cpc	r23, r1
    22f8:	08 95       	ret
    22fa:	9b 01       	movw	r18, r22
    22fc:	ac 01       	movw	r20, r24
    22fe:	0a 2e       	mov	r0, r26
    2300:	06 94       	lsr	r0
    2302:	57 95       	ror	r21
    2304:	47 95       	ror	r20
    2306:	37 95       	ror	r19
    2308:	27 95       	ror	r18
    230a:	ba 95       	dec	r27
    230c:	c9 f7       	brne	.-14     	; 0x2300 <__ultoa_invert+0xa2>
    230e:	62 0f       	add	r22, r18
    2310:	73 1f       	adc	r23, r19
    2312:	84 1f       	adc	r24, r20
    2314:	95 1f       	adc	r25, r21
    2316:	a0 1d       	adc	r26, r0
    2318:	08 95       	ret

0000231a <__muluhisi3>:
    231a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__umulhisi3>
    231e:	a5 9f       	mul	r26, r21
    2320:	90 0d       	add	r25, r0
    2322:	b4 9f       	mul	r27, r20
    2324:	90 0d       	add	r25, r0
    2326:	a4 9f       	mul	r26, r20
    2328:	80 0d       	add	r24, r0
    232a:	91 1d       	adc	r25, r1
    232c:	11 24       	eor	r1, r1
    232e:	08 95       	ret

00002330 <__mulshisi3>:
    2330:	b7 ff       	sbrs	r27, 7
    2332:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__muluhisi3>

00002336 <__mulohisi3>:
    2336:	0e 94 8d 11 	call	0x231a	; 0x231a <__muluhisi3>
    233a:	82 1b       	sub	r24, r18
    233c:	93 0b       	sbc	r25, r19
    233e:	08 95       	ret

00002340 <__prologue_saves__>:
    2340:	2f 92       	push	r2
    2342:	3f 92       	push	r3
    2344:	4f 92       	push	r4
    2346:	5f 92       	push	r5
    2348:	6f 92       	push	r6
    234a:	7f 92       	push	r7
    234c:	8f 92       	push	r8
    234e:	9f 92       	push	r9
    2350:	af 92       	push	r10
    2352:	bf 92       	push	r11
    2354:	cf 92       	push	r12
    2356:	df 92       	push	r13
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	ca 1b       	sub	r28, r26
    236a:	db 0b       	sbc	r29, r27
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	09 94       	ijmp

00002378 <__epilogue_restores__>:
    2378:	2a 88       	ldd	r2, Y+18	; 0x12
    237a:	39 88       	ldd	r3, Y+17	; 0x11
    237c:	48 88       	ldd	r4, Y+16	; 0x10
    237e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2380:	6e 84       	ldd	r6, Y+14	; 0x0e
    2382:	7d 84       	ldd	r7, Y+13	; 0x0d
    2384:	8c 84       	ldd	r8, Y+12	; 0x0c
    2386:	9b 84       	ldd	r9, Y+11	; 0x0b
    2388:	aa 84       	ldd	r10, Y+10	; 0x0a
    238a:	b9 84       	ldd	r11, Y+9	; 0x09
    238c:	c8 84       	ldd	r12, Y+8	; 0x08
    238e:	df 80       	ldd	r13, Y+7	; 0x07
    2390:	ee 80       	ldd	r14, Y+6	; 0x06
    2392:	fd 80       	ldd	r15, Y+5	; 0x05
    2394:	0c 81       	ldd	r16, Y+4	; 0x04
    2396:	1b 81       	ldd	r17, Y+3	; 0x03
    2398:	aa 81       	ldd	r26, Y+2	; 0x02
    239a:	b9 81       	ldd	r27, Y+1	; 0x01
    239c:	ce 0f       	add	r28, r30
    239e:	d1 1d       	adc	r29, r1
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	ed 01       	movw	r28, r26
    23ac:	08 95       	ret

000023ae <__umulhisi3>:
    23ae:	a2 9f       	mul	r26, r18
    23b0:	b0 01       	movw	r22, r0
    23b2:	b3 9f       	mul	r27, r19
    23b4:	c0 01       	movw	r24, r0
    23b6:	a3 9f       	mul	r26, r19
    23b8:	70 0d       	add	r23, r0
    23ba:	81 1d       	adc	r24, r1
    23bc:	11 24       	eor	r1, r1
    23be:	91 1d       	adc	r25, r1
    23c0:	b2 9f       	mul	r27, r18
    23c2:	70 0d       	add	r23, r0
    23c4:	81 1d       	adc	r24, r1
    23c6:	11 24       	eor	r1, r1
    23c8:	91 1d       	adc	r25, r1
    23ca:	08 95       	ret

000023cc <_exit>:
    23cc:	f8 94       	cli

000023ce <__stop_program>:
    23ce:	ff cf       	rjmp	.-2      	; 0x23ce <__stop_program>
